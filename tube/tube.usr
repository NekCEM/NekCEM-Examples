c-----------------------------------------------------------------------
c  USER SPECIFIED ROUTINES:
c
c     - boundary conditions
c     - initial conditions
c     - variable properties
c     - forcing function for fluid (f)
c     - forcing function for passive scalar (q)
c     - general purpose routine for checking errors etc.
c-----------------------------------------------------------------------
      subroutine userinc
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      include 'POISSON'
      include 'PML'

      return
      end
c-----------------------------------------------------------------------
      subroutine useric  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
C
      return
      end
c-----------------------------------------------------------------------
      subroutine usersol(tt, myshx, myshy, myshz, mysex, mysey, mysez)
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      real tt
      real myshx(lx1,ly1,lz1,lelt)
      real myshy(lx1,ly1,lz1,lelt)
      real myshz(lx1,ly1,lz1,lelt)
      real mysex(lx1,ly1,lz1,lelt)
      real mysey(lx1,ly1,lz1,lelt)
      real mysez(lx1,ly1,lz1,lelt)

      return
      end
       
c-----------------------------------------------------------------------
      subroutine usrdat

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      real     sc    

      sc = 1.0E-3

      n = nx1*ny1*nz1*nelt
      do i=1,n
         xm1(i,1,1,1)= xm1(i,1,1,1)*sc
         ym1(i,1,1,1)= ym1(i,1,1,1)*sc
         zm1(i,1,1,1)= zm1(i,1,1,1)*sc
      enddo

      return
      end

c-----------------------------------------------------------------------
      subroutine userini(tt, myhx, myhy, myhz, myex, myey, myez)

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      include 'POISSON'

      real tt
      real myhx(lx1,ly1,lz1,lelt)
      real myhy(lx1,ly1,lz1,lelt)
      real myhz(lx1,ly1,lz1,lelt)
      real myex(lx1,ly1,lz1,lelt)
      real myey(lx1,ly1,lz1,lelt)
      real myez(lx1,ly1,lz1,lelt)

      npts=nx1*ny1*nz1*nelt

      rsigma = 1.0E-3 !param(70)
      zsigma = 2.0E-3 !param(71)
      zwidth = 5*zsigma

      rposition=0.0
      zposition=0.0
      bnch_normal  = 1.0/(sqrt(2.0*pi)*rsigma)

C...  circ mesh with PEC boundary
      do i = 1,npts
         xx = xm1(i,1,1,1)
         yy = ym1(i,1,1,1)
         rr = xx**2+yy**2
         rr = rr-rposition
         rdensity= exp(-0.5*(rr/rsigma)**2)*bnch_normal
         !arg= pi/2.0*rr
         !rdensity = (cos(arg))**20
         charge(i) = rdensity
         spotent(i)= 0
         epotent(i)= 0
      enddo
      if (nid.eq.0) write(6,*) 'poisson: set charge in userini'

      call poissonq (myex,myey,myez,potent,npts)

      call sub3(epotent,spotent,potent,npts)
      errmax= glamax(epotent,npts)
      if (nid.eq.0) write(6,*) 'poisson: potent_maxerr=',errmax

      call maxwell_grad(myex,myey,myez,potent)
      call chsign(myex,npts)
      call chsign(myey,npts)
      call chsign(myez,npts)

      return
      end
c-----------------------------------------------------------------------
      real function bnch_rdensity(rr,rsigma,rposition)
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      real     rr,rsigma,rposition
      real     bnch_normal

      bnch_normal  = 1.0/(sqrt(2.0*pi)*rsigma)
      rr  = rr-rposition
      bnch_rdensity= exp(-0.5*(rr/rsigma)**2)*bnch_normal
      return
      end
c-----------------------------------------------------------------------
      real function bnch_zdensity(zz,zsigma,zposition)
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      real     zz,zsigma,zposition
      real     bnch_normal

      bnch_normal  = 1.0/(sqrt(2.0*pi)*zsigma)
      zz  = zz-cspeed*rktime-zposition
      bnch_zdensity= exp(-0.5*(zz/zsigma)**2)*bnch_normal

      return
      end
c-----------------------------------------------------------------------
      subroutine usersrc(baseidx,srchx,srchy,srchz,srcex,srcey,srcez)
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      real    srchx(lx1,ly1,lz1,lelt),
     $        srchy(lx1,ly1,lz1,lelt),
     $        srchz(lx1,ly1,lz1,lelt),
     $        srcex(lx1,ly1,lz1,lelt),
     $        srcey(lx1,ly1,lz1,lelt),
     $        srcez(lx1,ly1,lz1,lelt) 

      integer icalld
      save    icalld
      data    icalld /0/           

      real    rsigma,zsigma,rposition,zposition,bunch_normal,arg
      save    rsigma,zsigma,rposition,zposition,bunch_normal,arg

      n    = nx1*ny1*nz1*nelt
      nxyz = nx1*ny1*nz1          

      if (icalld.eq.0) then

        rsigma = 1.0E-3
        zsigma = 2.0E-3
        zposition= 1.0 

        if (nid.eq.0) then
           write(6,*) 'rsigma    =',rsigma
           write(6,*) 'zsigma    =',zsigma
           write(6,*) 'zposition =',zposition
           write(6,*)                              
        endif

        do i = 1,n
           xx= xm1(i,1,1,1)
           yy= ym1(i,1,1,1)
           rr= sqrt(xx**2+yy**2)
           rdensity = bnch_rdensity(rr)
           bunchr(i)= rdensity*cspeed*bm1(i,1,1,1)             
        enddo

        bnch_normal  = 1.0/(sqrt(2.0*pi)*zsigma)
        arg = -0.5/(zsigma)**2
        icalld = 1

      endif

      do i = 1,n
         xx= xm1(i,1,1,1)
         yy= ym1(i,1,1,1)
         zz= zm1(i,1,1,1)
         zz= zz-cspeed*rktime-zposition             
         zdensity= exp(-0.5*(zz/zsigma)**2)*bnch_normal
         srcez(i,1,1,1)= srcez(i,1,1,1)
     $   -exp(arg*zz*zz)*bnch_normal*bunchr(i)
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      integer  n, ix, iy, iz, ieg
      real     pi, one, xcc, ycc, zcc, x1, y1, z1
      real     lambda, fc, wc                     

      iel     = gllel(ieg)
      call usermedia   (ix,iy,iz,iel)

      if (IFPML)    call userpml  (ix,iy,iz,iel)
      if (IFWAKE)   call userwake (ix,iy,iz,iel)

      return
      end
c-----------------------------------------------------------------------
      subroutine usermedia(ix,iy,iz,iel) ! Vector form of userf
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      integer  n, ix, iy,iz, ieg
      real     pi, one, xcc, ycc, zcc, x1, y1, z1
      real     lambda, fc, wc                     

      udiff  = 0.
      utrans = 0.

      permea =  permea_0             
      permit =  permit_0                

      return
      end
c-----------------------------------------------------------------------
      subroutine userdrude(ix,iy,iz,iel) ! Vector form of userf
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      integer  n, ix, iy,iz, iel

      return
      end
c-----------------------------------------------------------------------
      subroutine userpml(ix,iy,iz,iel) ! Vector form of userf
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'


      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer ix, iy, iz, ieg
C
      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      include 'PML'
      include 'BEAM'

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux=0.0
      uy=0.0
      uz=0.0
      temp=0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userwake(ix,iy,iz,ieg) 
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      common /ccpu/ cpu_t,cpu_dtime,cpu_chk

c ... compute errors


      if (istep.le.10.or.mod(istep,iocomm).eq.0) then

        ntott = nx1*ny1*nz1*nelt
        npts3 = nx1*ny1*nz1*nelt*3
        nsrf  = nx1*nz1*nelt*6

        if (ifsol) then
          call usersol(time,sHN(1,1),sHN(1,2),sHN(1,3),
     $                      sEN(1,1),sEN(1,2),sEN(1,3))
        else
          call rzero(sHN, npts3) 
          call rzero(sEN, npts3) 
        endif

        call sub3(ErrHN(1,1),SHN(1,1),HN(1,1),NTOTT)
        call sub3(ErrHN(1,2),SHN(1,2),HN(1,2),NTOTT)
        call sub3(ErrHN(1,3),SHN(1,3),HN(1,3),NTOTT)
        call sub3(ErrEN(1,1),SEN(1,1),EN(1,1),NTOTT)
        call sub3(ErrEN(1,2),SEN(1,2),EN(1,2),NTOTT)
        call sub3(ErrEN(1,3),SEN(1,3),EN(1,3),NTOTT)

        HXmr = glamax(ErrHN(1,1),NTOTT)
        HYmr = glamax(ErrHN(1,2),NTOTT)
        HZmr = glamax(ErrHN(1,3),NTOTT)
        EXmr = glamax(ErrEN(1,1),NTOTT)
        EYmr = glamax(ErrEN(1,2),NTOTT)
        EZmr = glamax(ErrEN(1,3),NTOTT)
 
        HXer = glsc3(ErrHN(1,1),bm1,ErrHN(1,1),NTOTT)/ volvm1
        HYer = glsc3(ErrHN(1,2),bm1,ErrHN(1,2),NTOTT)/ volvm1
        HZer = glsc3(ErrHN(1,3),bm1,ErrHN(1,3),NTOTT)/ volvm1
        EXer = glsc3(ErrEN(1,1),bm1,ErrEN(1,1),NTOTT)/ volvm1
        EYer = glsc3(ErrEN(1,2),bm1,ErrEN(1,2),NTOTT)/ volvm1
        EZer = glsc3(ErrEN(1,3),bm1,ErrEN(1,3),NTOTT)/ volvm1

        if (hxer.gt.0) hxer = sqrt(hxer)
        if (hyer.gt.0) hyer = sqrt(hyer)
        if (hzer.gt.0) hzer = sqrt(hzer)
        if (exer.gt.0) exer = sqrt(exer)
        if (eyer.gt.0) eyer = sqrt(eyer)
        if (ezer.gt.0) ezer = sqrt(ezer)

c ... print statement

        snel = nelt + .5
        snel = sqrt(snel)
        nels = snel
        nnn  = nx1-1
        npt1 = nnn*nels
        npts = nx1*ny1*nz1*nelt ! npts = npt1**ndim

        if (istep.eq.0)       cpu_p_t= 0
        if (istep.gt.0)       cpu_p_t= cpu_t/(npts*istep)
        if (istep.eq.nsteps)  cpu_p_t= glsum(cpu_p_t,1)/np

        if (nid.eq.0) then

         if (istep.eq.1) write(6,90)
         write(6,91) ISTEP,nelt,nels,nnn,npt1,npts
     $         ,time,dt,HXer,HYer,HZer,EXer,EYer,EZer,cpu_t,cpu_p_t
         write(6,95) ISTEP,nelt,nels,nnn,npt1,npts
     $         ,time,dt,HXmr,HYmr,HZmr,EXmr,EYmr,EZmr,cpu_t,cpu_p_t


 90      format(/,'    istep   nelt  nels  N  npt1    npts   time
     $  dt     HXerr     HYerr     HZerr     EXerr     EYerr     EZerr
     $  cpu_t   cpu_t_pts')
 91      format(/,i10,3i5,i5,i9,1p9e10.3,e9.2,' CPU: L2  '  )
 95      format(  i10,3i5,i5,i9,1p9e10.3,e9.2,' CPU: Linf'  )

        endif ! nid=0

      endif

      return
      end
c-----------------------------------------------------------------------
