c-----------------------------------------------------------------------
c  USER SPECIFIED ROUTINES:
c
c     - boundary conditions
c     - initial conditions
c     - variable properties
c     - forcing function for fluid (f)
c     - forcing function for passive scalar (q)
c     - general purpose routine for checking errors etc.
c-----------------------------------------------------------------------
      subroutine userinc        
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
 
      return
      end
c-----------------------------------------------------------------------
      subroutine usersol(tt, myshx, myshy, myshz, mysex, mysey, mysez)
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      real tt
      real myshx(lx1,ly1,lz1,lelt)
      real myshy(lx1,ly1,lz1,lelt)
      real myshz(lx1,ly1,lz1,lelt)
      real mysex(lx1,ly1,lz1,lelt)
      real mysey(lx1,ly1,lz1,lelt)
      real mysez(lx1,ly1,lz1,lelt)


      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      integer    nzl,nzs
      parameter (nzl=200)
      parameter (nzs=  5)
      common   /BEAMZ/ zl(0:nzl), zslice(0:nzs)
      real             zl, zslice
      common   /BEAMI/ ztype(lelt)
      integer          ztype


      n   = nx1*ny1*nz1*nelt
      zmax= glmax(zm1,n)
      zmin= glmin(zm1,n)
      ymax= glmax(ym1,n)
      ymin= glmin(ym1,n)
      xmax= glmax(xm1,n)
      xmin= glmin(xm1,n)
      rmax= xmax**2+ymax**2 
      rmax= sqrt(rmax)
      if (nid.eq.0) write(6,*) 'rmax=',rmax

c...  Scale in r=1 and z=[0 300]       
      sz = 300.0/(zmax-zmin)
      do i=1,n    
         xx=xm1(i,1,1,1)
         yy=ym1(i,1,1,1)
         zz=zm1(i,1,1,1)
         rr=xx**2+yy**2
         rr=sqrt(rr)
         theta=atan2(yy,xx)
c        xm1(i,1,1,1)=rr/rmax*cos(theta)
c        ym1(i,1,1,1)=rr/rmax*sin(theta)
         zm1(i,1,1,1)=sz*(zz-zmin)
      enddo       

c...  Confirm Max Values
      zmax= glmax(zm1,n)
      zmin= glmin(zm1,n)
      ymax= glmax(ym1,n)
      ymin= glmin(ym1,n)
      xmax= glmax(xm1,n)
      xmin= glmin(xm1,n)
      rmax= xmax**2+ymax**2 
      rmax= sqrt(rmax)
      if (nid.eq.0) write(6,*) 'rmax=',rmax,', zmax=',zmax

c...  Assign Zslice Info for Undulator
      zslice(0)=   0.0
      zslice(1)=  25.0 !straight
      zslice(2)= 125.0 !linear transition
      zslice(3)= 175.0 !straight          
      zslice(4)= 275.0 !linear transition
      zslice(5)= 300.0 !straight
      nzslice  = 5

c...  Assign Element Type
      nxyz = nx1*ny1*nz1
      do ie=1,nelt
         zmax= vlmax(zm1(1,1,1,ie),nxyz)
         zmin= vlmin(zm1(1,1,1,ie),nxyz)
         zmid= (zmax+zmin)/2.0
         if     ((zmid.lt.zslice(1)).and.(zmid.gt.zslice(0))) then 
                ztype(ie) = 0 
         elseif ((zmid.lt.zslice(2)).and.(zmid.gt.zslice(1))) then 
                ztype(ie) = 1 
         elseif ((zmid.lt.zslice(3)).and.(zmid.gt.zslice(2))) then 
                ztype(ie) = 2 
         elseif ((zmid.lt.zslice(4)).and.(zmid.gt.zslice(3))) then 
                ztype(ie) = 3 
         elseif ((zmid.lt.zslice(5)).and.(zmid.gt.zslice(4))) then 
                ztype(ie) = 4 
         else
              if (nid.eq.0) write(6,*) 'zmid=',zmax,zmin,zmid
              if (nid.eq.0) write(6,*) 'ztype: not fully matching'
              call exitt
         endif
      enddo 

c...  Variables for Geometry
      r0 = 1.0
      aa1= 37.5
      bb1= 12.5
      aa2= 25.0
      bb2=  3.0


      do ie=1,nelt

c...     straight
         if     (ztype(ie).eq.0) then
           do i = 1,nxyz 
              xx= xm1(i,1,1,ie)
              yy= ym1(i,1,1,ie)
              zz= zm1(i,1,1,ie)
              theta= atan2(yy,xx)
              rr= xx**2 + yy**2 
              rr= sqrt(rr)
              if (rr.ge.r0) then
                  rsx=r0+(aa2-r0)/(rmax-r0)*(rr-r0)
                  rsy=r0+(bb2-r0)/(rmax-r0)*(rr-r0)
              else
                  rsx=rr
                  rsy=rr
              endif
              xm1(i,1,1,ie)=rsx*cos(theta)
              ym1(i,1,1,ie)=rsy*sin(theta)
           enddo

c...     transition
         elseif (ztype(ie).eq.1) then 
           do i = 1,nxyz
              xx= xm1(i,1,1,ie)
              yy= ym1(i,1,1,ie)
              zz= zm1(i,1,1,ie)
              theta= atan2(yy,xx)
              rr= xx**2 + yy**2
              rr= sqrt(rr)
              if (rr.ge.r0) then
                  z1 = zslice(1)
                  z2 = zslice(2)
                  rsx2=r0+(aa2-r0)/(rmax-r0)*(rr-r0)
                  rsx1=r0+(aa1-r0)/(rmax-r0)*(rr-r0)
                  rsy2=r0+(bb2-r0)/(rmax-r0)*(rr-r0)
                  rsy1=r0+(bb1-r0)/(rmax-r0)*(rr-r0)
                  rsx=(rsx1-rsx2)/(z2-z1)*(zz-z1)+rsx2
                  rsy=(rsy1-rsy2)/(z2-z1)*(zz-z1)+rsy2
              else
                  rsx=rr
                  rsy=rr
              endif
              xm1(i,1,1,ie)=rsx*cos(theta)
              ym1(i,1,1,ie)=rsy*sin(theta)
           enddo

c...     straight
         elseif (ztype(ie).eq.2) then 
           do i = 1,nxyz
              xx= xm1(i,1,1,ie)
              yy= ym1(i,1,1,ie)
              zz= zm1(i,1,1,ie)
              theta= atan2(yy,xx)
              rr= xx**2 + yy**2
              rr= sqrt(rr)
              if (rr.ge.r0) then
                  rsx=r0+(aa1-r0)/(rmax-r0)*(rr-r0)
                  rsy=r0+(bb1-r0)/(rmax-r0)*(rr-r0)
              else
                  rsx=rr
                  rsy=rr
              endif
              xm1(i,1,1,ie)=rsx*cos(theta)
              ym1(i,1,1,ie)=rsy*sin(theta)
           enddo

c...     transition
         elseif (ztype(ie).eq.3) then 
           do i = 1,nxyz
              xx= xm1(i,1,1,ie)
              yy= ym1(i,1,1,ie)
              zz= zm1(i,1,1,ie)
              theta= atan2(yy,xx)
              rr= xx**2 + yy**2
              rr= sqrt(rr)
              if (rr.ge.r0) then
                  z1 = zslice(3)
                  z2 = zslice(4)
                  rsx2=r0+(aa2-r0)/(rmax-r0)*(rr-r0)
                  rsx1=r0+(aa1-r0)/(rmax-r0)*(rr-r0)
                  rsy2=r0+(bb2-r0)/(rmax-r0)*(rr-r0)
                  rsy1=r0+(bb1-r0)/(rmax-r0)*(rr-r0)
                  rsx=(rsx2-rsx1)/(z2-z1)*(zz-z1)+rsx1
                  rsy=(rsy2-rsy1)/(z2-z1)*(zz-z1)+rsy1
              else
                  rsx=rr
                  rsy=rr
              endif
              xm1(i,1,1,ie)=rsx*cos(theta)
              ym1(i,1,1,ie)=rsy*sin(theta)
           enddo


c...     straight
         elseif (ztype(ie).eq.4) then
           do i = 1,nxyz
              xx= xm1(i,1,1,ie)
              yy= ym1(i,1,1,ie)
              zz= zm1(i,1,1,ie)
              theta= atan2(yy,xx)
              rr= xx**2 + yy**2
              rr= sqrt(rr)
              if (rr.ge.r0) then
                  rsx=r0+(aa2-r0)/(rmax-r0)*(rr-r0)
                  rsy=r0+(bb2-r0)/(rmax-r0)*(rr-r0)
              else
                  rsx=rr
                  rsy=rr
              endif
              xm1(i,1,1,ie)=rsx*cos(theta)
              ym1(i,1,1,ie)=rsy*sin(theta)
           enddo
         endif

      enddo

      return
      end

c-----------------------------------------------------------------------
      subroutine userini(tt, myhx, myhy, myhz, myex, myey, myez)

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'POISSON'

      real tt
      real myhx(lx1,ly1,lz1,lelt)
      real myhy(lx1,ly1,lz1,lelt)
      real myhz(lx1,ly1,lz1,lelt)
      real myex(lx1,ly1,lz1,lelt)
      real myey(lx1,ly1,lz1,lelt)
      real myez(lx1,ly1,lz1,lelt)

      npts=nx1*ny1*nz1*nelt

      rsigma = 1.0E-3 !param(70)
      zsigma = 2.0E-3 !param(71)
      zwidth = 5*zsigma

      rposition=0.0
      zposition=0.0
      bnch_normal  = 1.0/(sqrt(2.0*pi)*rsigma)

C...  circ mesh with PEC boundary
      do i = 1,npts
         xx = xm1(i,1,1,1)
         yy = ym1(i,1,1,1)
         rr = xx**2+yy**2
         rr = rr-rposition
         !rdensity= exp(-0.5*(rr/rsigma)**2)*bnch_normal
         !arg= pi/2.0*rr
         rdensity = (cos(arg))**20
         charge(i) = rdensity
         spotent(i)= 0
         epotent(i)= 0
      enddo
      if (nid.eq.0) write(6,*) 'poisson: set charge in userini'

c     call poissonq (myex,myey,myez,potent,npts)

      call sub3(epotent,spotent,potent,npts)
      errmax= glamax(epotent,npts)
      if (nid.eq.0) write(6,*) 'poisson: potent_maxerr=',errmax

      !call maxwell_grad(myex,myey,myez,potent)
      !call chsign(myex,npts)
      !call chsign(myey,npts)
      !call chsign(myez,npts)

      return
      end
c-----------------------------------------------------------------------
      real function bnch_rdensity(rr,rsigma,rposition)
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      real     rr,rsigma,rposition
      real     bnch_normal

      bnch_normal  = 1.0/(sqrt(2.0*pi)*rsigma)
      rr  = rr-rposition
      bnch_rdensity= exp(-0.5*(rr/rsigma)**2)*bnch_normal
      return
      end
c-----------------------------------------------------------------------
      real function bnch_zdensity(zz,zsigma,zposition)
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      real     zz,zsigma,zposition
      real     bnch_normal

      bnch_normal  = 1.0/(sqrt(2.0*pi)*zsigma)
      zz  = zz-cspeed*rktime-zposition
      bnch_zdensity= exp(-0.5*(zz/zsigma)**2)*bnch_normal

      return
      end
c-----------------------------------------------------------------------
      subroutine usersrc(baseidx,srchx,srchy,srchz,srcex,srcey,srcez)
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      real    srchx(lx1,ly1,lz1,lelt),
     $        srchy(lx1,ly1,lz1,lelt),
     $        srchz(lx1,ly1,lz1,lelt),
     $        srcex(lx1,ly1,lz1,lelt),
     $        srcey(lx1,ly1,lz1,lelt),
     $        srcez(lx1,ly1,lz1,lelt) 

      do i=1,n
         xx= xm1(i,1,1,1)
         yy= ym1(i,1,1,1)
         rr= sqrt(xx**2+yy**2)
         rdensity= bnch_rdensity(rr)
         bunchr(i)= rdensity*cspeed*bm1(i,1,1,1)             
         bunchr(i)= 0.0
         srcez(i,1,1,1)=srcez(i,1,1,1)+bunchr(i)
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,iel)
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      integer  n, ix, iy, iz, ieg
      real     pi, one, xcc, ycc, zcc, x1, y1, z1
      real     lambda, fc, wc                     

      call usermedia   (ix,iy,iz,iel)

      return
      end
c-----------------------------------------------------------------------
      subroutine usermedia(ix,iy,iz,iel) ! Vector form of userf
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      integer  n, ix, iy,iz, ieg
      real     pi, one, xcc, ycc, zcc, x1, y1, z1
      real     lambda, fc, wc                     

      udiff  = 0.
      utrans = 0.

      permea = permea_0
      permit = permit_0

      return
      end
c-----------------------------------------------------------------------
      subroutine userdrude(ix,iy,iz,iel) ! Vector form of userf
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      integer  n, ix, iy,iz, iel

      return
      end
c-----------------------------------------------------------------------
      subroutine userpml(ix,iy,iz,iel) ! Vector form of userf
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'


      return
      end
c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer ix, iy, iz, ieg
C
      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux=0.0
      uy=0.0
      uz=0.0
      temp=0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine userwake(ix,iy,iz,ieg) 
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      common /ccpu/ cpu_t,cpu_dtime,cpu_chk

c ... compute errors


      if (istep.le.10.or.mod(istep,iocomm).eq.0) then

        ntott = nx1*ny1*nz1*nelt
        npts3 = nx1*ny1*nz1*nelt*3
        nsrf  = nx1*nz1*nelt*6

        if (ifsol) then
          call usersol(time,sHN(1,1),sHN(1,2),sHN(1,3),
     $                      sEN(1,1),sEN(1,2),sEN(1,3))
        else
          call rzero(sHN, npts3) 
          call rzero(sEN, npts3) 
        endif

        call sub3(ErrHN(1,1),SHN(1,1),HN(1,1),NTOTT)
        call sub3(ErrHN(1,2),SHN(1,2),HN(1,2),NTOTT)
        call sub3(ErrHN(1,3),SHN(1,3),HN(1,3),NTOTT)
        call sub3(ErrEN(1,1),SEN(1,1),EN(1,1),NTOTT)
        call sub3(ErrEN(1,2),SEN(1,2),EN(1,2),NTOTT)
        call sub3(ErrEN(1,3),SEN(1,3),EN(1,3),NTOTT)

        HXmr = glamax(ErrHN(1,1),NTOTT)
        HYmr = glamax(ErrHN(1,2),NTOTT)
        HZmr = glamax(ErrHN(1,3),NTOTT)
        EXmr = glamax(ErrEN(1,1),NTOTT)
        EYmr = glamax(ErrEN(1,2),NTOTT)
        EZmr = glamax(ErrEN(1,3),NTOTT)
 
        HXer = glsc3(ErrHN(1,1),bm1,ErrHN(1,1),NTOTT)/ volvm1
        HYer = glsc3(ErrHN(1,2),bm1,ErrHN(1,2),NTOTT)/ volvm1
        HZer = glsc3(ErrHN(1,3),bm1,ErrHN(1,3),NTOTT)/ volvm1
        EXer = glsc3(ErrEN(1,1),bm1,ErrEN(1,1),NTOTT)/ volvm1
        EYer = glsc3(ErrEN(1,2),bm1,ErrEN(1,2),NTOTT)/ volvm1
        EZer = glsc3(ErrEN(1,3),bm1,ErrEN(1,3),NTOTT)/ volvm1

        if (hxer.gt.0) hxer = sqrt(hxer)
        if (hyer.gt.0) hyer = sqrt(hyer)
        if (hzer.gt.0) hzer = sqrt(hzer)
        if (exer.gt.0) exer = sqrt(exer)
        if (eyer.gt.0) eyer = sqrt(eyer)
        if (ezer.gt.0) ezer = sqrt(ezer)

c ... print statement

        snel = nelt + .5
        snel = sqrt(snel)
        nels = snel
        nnn  = nx1-1
        npt1 = nnn*nels
        npts = nx1*ny1*nz1*nelt ! npts = npt1**ndim

        if (istep.eq.0)       cpu_p_t= 0
        if (istep.gt.0)       cpu_p_t= cpu_t/(npts*istep)
        if (istep.eq.nsteps)  cpu_p_t= glsum(cpu_p_t,1)/np

        if (nid.eq.0) then

         if (istep.eq.1) write(6,90)
         write(6,91) ISTEP,nelt,nels,nnn,npt1,npts
     $         ,time,dt,HXer,HYer,HZer,EXer,EYer,EZer,cpu_t,cpu_p_t
         write(6,95) ISTEP,nelt,nels,nnn,npt1,npts
     $         ,time,dt,HXmr,HYmr,HZmr,EXmr,EYmr,EZmr,cpu_t,cpu_p_t


 90      format(/,'    istep   nelt  nels  N  npt1    npts   time
     $  dt     HXerr     HYerr     HZerr     EXerr     EYerr     EZerr
     $  cpu_t   cpu_t_pts')
 91      format(/,i10,3i5,i5,i9,1p9e10.3,e9.2,' CPU: L2  '  )
 95      format(  i10,3i5,i5,i9,1p9e10.3,e9.2,' CPU: Linf'  )

        endif ! nid=0

      endif

      return
      end
