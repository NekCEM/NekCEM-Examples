c-----------------------------------------------------------------------
c
c  USER SPECIFIED ROUTINES:
c
c     - boundary conditions
c     - initial conditions
c     - variable properties
c     - forcing function for fluid (f)
c     - forcing function for passive scalar (q)
c     - general purpose routine for checking errors etc.
c
c-----------------------------------------------------------------------
      subroutine userinc
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      return
      end
c-----------------------------------------------------------------------
      subroutine userini(tt, myhx, myhy, myhz, myex, myey, myez)
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'DRIFT'  
      include 'NEKUSE'
      include 'POISSON'  
      include 'BCS'  
      
      real tt,tmp,n0,p0
      real myhx(lx1,ly1,lz1,lelt)
      real myhy(lx1,ly1,lz1,lelt)
      real myhz(lx1,ly1,lz1,lelt)
      real myex(lx1,ly1,lz1,lelt)
      real myey(lx1,ly1,lz1,lelt)
      real myez(lx1,ly1,lz1,lelt)

      do ie=1,nelt 
         if      (if_in_region(ie).eq. 2) then ! n region N_D=0
            do i=1,nxyz
             j=(ie-1)*nxyz+i
             xx=xm1(i,1,1,ie)
             yy=ym1(i,1,1,ie)
             cN(j)=cN_0(j)
             cP(j)=cP_0(j)
             cE(j)=0.0
            enddo
         elseif (if_in_region(ie).eq.1) then ! p region N_A=0
            do i=1,nxyz
             j=(ie-1)*nxyz+i
             xx=xm1(i,1,1,ie)
             yy=ym1(i,1,1,ie)
             cN(j)=cN_0(j)
             cP(j)=cP_0(j)
             cE(j)=0.0
            enddo
         else
             if (nid.eq.0) write(6,*) 'if_in_region not defined in usr'
        endif
      enddo
      return
      end
c-----------------------------------------------------------------------
      subroutine usersol(tt,myscn, myscp, mysce, mysex, mysey, mysez)
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'DRIFT'
      include 'NEKUSE'
      include 'GEOMBOUND'

      real myscN(lpts) 
      real myscP(lpts) 
      real myscE(lpts) 

      real mysex(lx1,ly1,lz1,lelt)
      real mysey(lx1,ly1,lz1,lelt)
      real mysez(lx1,ly1,lz1,lelt)

      real     xx, yy, zz, tt, tmp  
      integer  i, j, ie                          
     
      return
      end
c-----------------------------------------------------------------------
      subroutine usersrc
     $            (baseidx,rhs_cn,rhs_cp,rhs_ce,rhs_phi,dumm1,dumm2)     
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      include 'DRIFT'
      include 'POISSON'
      include 'RK5'
      include 'BCS'
      integer i,j,i0,baseidx
      real    xx,yy,zz,tt,pi2,nc,nv,eg1,glmax,glmin 
      real    sinx,cosx2,sinx2,sint2,dudx,dudy,uu
      real    tmp1,tmp2,tmp3,tmp4,xmax,xmin    
      real    rhs_cn(1),rhs_cp(1),rhs_ce(1)
      real    rhs_phi(1)
      real    nbc_cn(1),nbc_cp(1),nbc_ce(1),nbc_phi(1)
      real    don,acp,dumm1(1),dumm2(1)
      real    unx0,uny0,unz0,area0,glamax
      real    cem_drift_schottky_d_bc
      real    u_bi_top,u_bi_bot,appl,pmax,pmin
      real    n0,dmax,rr2,scale,scale_sn
c.....source for c_n,c_p,c_e at current step: time= istep*dt = time+dt
      if (ifrk) then
         tt=rktime
      else
         tt=time+dt 
      endif

      call rzero(rhs_cN,npts)
      call rzero(rhs_cP,npts)


      do i=1,npts
         xx = xm1(i,1,1,1)
         yy = ym1(i,1,1,1)
         zz = zm1(i,1,1,1)
         rr2= sqrt(xx**2+yy**2)
         dmax  = 1.e+28 
         scale = scale_time/scale_concent 
         rD (i)= scale*dmax*((200.-rr2)/200.)**2
         if (zz.le. 1900) then
            rD (i)= rD(i)*(zz*1.0/1900.)
         else
            rD (i)= rD(i)*((2000.-zz)*1.0/100.)
         endif
         tau_n = 1.6e-12/mu_n(i)/scale_mu
         rR (i)= (cN(i)*cP(i)-ni_0**2)/(cN(i)+cP(i)+2.0*ni_0)
     $           *scale_concent/tau_n
         rR (i)= rR(i)*scale ! Shockley-Read-Hall (SRH) recombination
         rhs_cN(i)= rD(i)-rR(i)
         rhs_cP(i)= rD(i)-rR(i)
      enddo
      call col2(rhs_cn,bmn,npts)
      call col2(rhs_cp,bmn,npts)

      if (ncemface_r(2).ge.1)  then
         if (ifinhom) then
         !define nonzero value
         call rzero(cn_b,npts)
         do i=1,ncemface_r(2)
            j     = cemface_r(i,2)
            i0    = cemface(j)
            area0 = aream(j)
            scale_sn=1.e+3*scale_time/scale_x
            tmp1  =-scale_sn*(cN(i0)-cN_0(i0))*aream(j)!1e+3=S_n=S_p
            rhs_cn(i0)=rhs_cn(i0)+tmp1
c             cn_b(i0)  =cN_0(i0)
         enddo 
         endif
      endif
      if (ncemface_r(3).ge.1)  then
         if (ifinhom) then
         !define nonzero value
         call rzero(cp_b,npts)
         do i=1,ncemface_r(3)
            j     = cemface_r(i,3)
            i0    = cemface(j)
            area0 = aream(j)
            scale_sn=1.e+3*scale_time/scale_x
            tmp1  =-scale_sn*(cP(i0)-cP_0(i0))*aream(j)
            rhs_cp(i0)=rhs_cp(i0)+tmp1
c             cp_b(i0)  =cP_0(i0)
         enddo 
         endif
      endif


c.....source for potential field (phi) at time
      tt= time
      call copy(rhs_phi,cP,npts)
      call add2s2(rhs_phi,cN,-1.0,npts)
      call add2s2(rhs_phi,ni,1.0,npts)
      call col2(rhs_phi,bmn,npts)

c.....source for potential field (phi) with pec boundary value at time 
      tt= time
      if (ifpec) then
         if(ifinhom) then
         call rzero(potent_b,npts)
         xmax=glmax(zm1,npts)
         xmin=glmin(zm1,npts)
         appl  = 0.0
         do i=1,ncemface_pec(1)
         j     = cemface_pec(i,1)
         i0    = cemface(j)
         zz    = zm1(i0,1,1,1)

         u_bi_top= 1./40*log(cN_0(i0)/ni_0)
         u_bi_bot=-1./40*log(cP_0(i0)/ni_0)
   
         if (zz.gt.1000) then
             uu= appl+u_bi_top
         else
             uu= appl+u_bi_bot
         endif
         uu    = uu/scale_potent
         potent_b(i0)=uu            ! pec bcs only physical value

         enddo 
         endif
      endif

      return
      end
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,iel)
c--------------------------------------------------------------------- 
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE' 
      include 'EMWAVE' 
      include 'DRIFT'
      include 'POISSON'
      integer  i,j,k,l,ie,ieg
      integer  ix,iy,iz,iel   
      real     tmp
      real     tmp1


      if (ifsol) then

      K_beta     = 1.0
      temperature= 1.0
      tau_n      = 1.0
      tau_p      = 1.0
      call rone(d_permit,npts)
      call rone(d_permea,npts)

      else

      scale_x      = 1.E-9
      scale_mu     = 1.e-2
      K_beta       = 1.3806488e-23
      e_charge     = 1.60217657e-19
      epsilon_0    = 8.854e-12
      temperature  = 300.0

      tmp1         = K_beta*temperature


      scale_potent  = tmp1/e_charge

      scale_concent = epsilon_0*scale_potent/e_charge/scale_x**2

      scale_time    = scale_x**2/scale_potent/scale_mu

      scale_elect   = scale_potent/scale_x

      scale_current = e_charge*scale_concent*scale_mu*scale_elect


c     constant_0   = e_charge/temperature/K_beta
c     r_coulomb=constant_0*e_charge/epsilon_0/4.0/pi

c     tau_n = 1.0E-4/scale_time
c     tau_p = 1.0E-4/scale_time
c     tau_cE= 1.0E-6/scale_time
      mu_n0 = 7.7e-9 /scale_mu
      mu_p0 = 5.1e-9 /scale_mu
      mu_e0 = 3.86e-9/scale_mu
      N_D   = 1.e+24/scale_concent  
      N_A   = 1.e+24/scale_concent
      ni_0  = 9.65e+15/scale_concent  !intrinsic carrier concentration in silicon at T=300K
      
      if (nid.eq.0) then

      write(6,*) 'scale_x',scale_x
      write(6,*) 'scale_mu',scale_mu
      write(6,*) 'scale_time',scale_time
      write(6,*) 'scale_concent',scale_concent
      write(6,*) 'scale_potent',scale_potent
      write(6,*) 'scale_elect',scale_elect
      write(6,*) 'scale_current',scale_current
      write(6,*) 'tau_n',tau_n
      write(6,*) 'tau_p',tau_p
      write(6,*) 'tau_e',tau_ce
      write(6,*) 'e_charge',e_charge
      write(6,*) 'k_beta',k_beta
      write(6,*) 'temperature',temperature
      write(6,*) 'constant_0',constant_0
      write(6,*) 'r_coulomb',r_coulomb
      write(6,*) 'mu_n0',mu_n0
      write(6,*) 'mu_p0',mu_p0

      endif

      do ie=1,nelt

         if     (if_in_region(ie).eq.1) then !donner N_D=0  p region

            do i= 1,nxyz
               j= (ie-1)*nxyz+i
               d_permit(j)= 11.68
               d_permea(j)= 1.0
               mu_n    (j)= 2.7
               mu_p    (j)= 0.95
               ni      (j)= -N_A  !  N_D-N_A
               cN_0    (j)= (sqrt(N_A**2+4.0*ni_0**2)-N_A)/2.0
               cP_0    (j)= (sqrt(N_A**2+4.0*ni_0**2)+N_A)/2.0
c               diff_n  (j)= 1.5 
c               diff_p  (j)= 1.5 
            enddo

         elseif (if_in_region(ie).eq.2) then !accepter N_A=0  n region
 
            do i= 1,nxyz
               j= (ie-1)*nxyz+i
               d_permit(j)= 11.68
               d_permea(j)= 1.0
               mu_n    (j)= 2.7
               mu_p    (j)= 0.95
               ni      (j)= N_D  ! N_D-N_A
               cN_0    (j)= (sqrt(N_D**2+4.0*ni_0**2)+N_D)/2.0
               cP_0    (j)= (sqrt(N_D**2+4.0*ni_0**2)-N_D)/2.0
c               diff_n  (j)= 0.4 
c               diff_p  (j)= 0.4 
            enddo

         else
            if (nid.eq.0) write(6,*) if_in_region(ie),
     $         'if_in_region not defined in usr'
         endif
      enddo

      endif
      call copy(diff_n,mu_n,npts)
      call copy(diff_p,mu_p,npts)
      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
C
      qvol   = 0.0
      source = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
C

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
      ux=0.0
      uy=0.0
      uz=0.0
      temp=0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      real xsize, ysize, zsize
      real xmin,xmax,ymin,ymax,zmin,zmax
      real radius

      real e1

      integer n = 8*lelt

      radius = geom_xyradius()
      radius = int(10*radius+0.1)/10.
      e1 = radius*radius - 1e-4

      do ie=1,nelt
      do i=1,8
        rr = xc(i,ie)*xc(i,ie) + yc(i,ie)*yc(i,ie)
        if (rr.gt.e1) then
           rr = sqrt(rr)
           rn = radius/rr
           xc(i,ie) = rn*xc(i,ie)
           yc(i,ie) = rn*yc(i,ie)
        endif
      enddo
      enddo
    1 format(2i5,1p3e18.9,a5)

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      include 'GEOMBOUND'
      real     rscale
      n = nx1*ny1*nz1*nelv


      xmin = glmin(xm1,n)
      xmax = glmax(xm1,n)
      ymin = glmin(ym1,n)
      ymax = glmax(ym1,n)
      zmin = glmin(zm1,n)
      zmax = glmax(zm1,n)



      if (nid.eq.0) write(6,*) 'xmin/xmax', xmin,xmax
      if (nid.eq.0) write(6,*) 'ymin/ymax', ymin,ymax
      if (nid.eq.0) write(6,*) 'zmin/zmax', zmin,zmax
      mx = nx1/2
      my = ny1/2
      mz = nz1/2
      do ie=1,nelt

         xxmax = vlmax(xm1(1,1,1,ie),nxyz)
         xxmin = vlmin(xm1(1,1,1,ie),nxyz)
         yymax = vlmax(ym1(1,1,1,ie),nxyz)
         yymin = vlmin(ym1(1,1,1,ie),nxyz)
         zzmax = vlmax(zm1(1,1,1,ie),nxyz)
         zzmin = vlmin(zm1(1,1,1,ie),nxyz)

         xxmid = xm1(mx,my,mz,ie)
         yymid = ym1(mx,my,mz,ie)
         zzmid = zm1(mx,my,mz,ie)
         rrmid = sqrt(xxmid**2+yymid**2)

         if     (zzmid.lt. 100) then
                 if_in_region(ie) =  1 ! p region
         elseif     (zzmid.lt. 1900) then
             if  (rrmid.lt.100) then
                 if_in_region(ie) =  1
             else
                 if_in_region(ie) =  2 ! n region
             endif
         else 
             if_in_region(ie) =  2
         endif
   
      enddo
      return
      end
c-----------------------------------------------------------------------
      subroutine userft           
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'


      return
      end

c-----------------------------------------------------------------------
      subroutine userchk
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'DRIFT' 
      include 'POISSON'

      common /ccpu/ cpu_t,cpu_dtime,cpu_chk
      real    dummy(lpts4)

c ... compute errors


      if (istep.le.10.or.mod(istep,iocomm).eq.0) then

        npts  = nx1*ny1*nz1*nelt
        ntott = nx1*ny1*nz1*nelt
        npts3 = nx1*ny1*nz1*nelt*3
        nsrf  = nx1*nz1*nelt*6

        if (ifsol) then
          call usersol(time   ,scn,scp,sce,dummy,dummy,dummy)
          call usersol(time-dt,spotent,dummy,dummy,dummy,dummy,dummy) !spotent=scn
        else
          call rzero(scn, npts) 
          call rzero(scp, npts) 
          call rzero(sce, npts) 
          call rzero(spotent, npts) 
        endif
        call sub3(ErrN,scN,cN,npts) 
        call sub3(ErrP,scP,cP,npts) 
        call sub3(ErrE,scE,cE,npts) 
        call sub3(epotent,spotent,potent,npts) 

        HXmr = glamax(ErrN,npts)  
        HYmr = glamax(ErrP,npts) 
        HZmr = glamax(ErrE,npts) 
        EXmr = glamax(epotent,npts)  
        EYmr = 0.0  
        EZmr = 0.0  
   
        HXer = glsc3(ErrN,bm1,ErrN,NTOTT)/ volvm1
        HYer = glsc3(ErrP,bm1,ErrP,NTOTT)/ volvm1
        HZer = glsc3(ErrE,bm1,ErrE,NTOTT)/ volvm1
        EXer = glsc3(epotent,bm1,epotent,NTOTT)/ volvm1
        EYer = 0.0  
        EZer = 0.0  


        
        if (hxer.gt.0) hxer = sqrt(hxer)
        if (hyer.gt.0) hyer = sqrt(hyer)
        if (hzer.gt.0) hzer = sqrt(hzer)
        if (exer.gt.0) exer = sqrt(exer)
        if (eyer.gt.0) eyer = sqrt(eyer)
        if (ezer.gt.0) ezer = sqrt(ezer)

c----- temporaty
        if (istep.eq. 0) then
        if (nid.eq.0) write(10,*) 'Linf norm (cn,cp,ce,phi)',nstep, dt
        if (nid.eq.0) write(11,*) 'L2   norm (cn,cp,ce,phi)',nstep, dt
        if (nid.eq.0) write(10,*) Hxmr,Hymr,Hzmr,Exmr
        if (nid.eq.0) write(11,*) Hxer,hyer,hzer,Exer
        else
        if (nid.eq.0) write(10,*) Hxmr,Hymr,Hzmr,Exmr
        if (nid.eq.0) write(11,*) Hxer,hyer,hzer,Exer
        endif
c ... print statement

        snel = nelt + .5
        snel = sqrt(snel)
        nels = snel
        nnn  = nx1-1
        npt1 = nnn*nels
        npts = nx1*ny1*nz1*nelt ! npts = npt1**ndim

        if (istep.eq.0)       cpu_p_t= 0
        if (istep.gt.0)       cpu_p_t= cpu_t/(npts*istep)
        if (istep.eq.nsteps)  cpu_p_t= glsum(cpu_p_t,1)/np

        if (nid.eq.0) then

         if (istep.eq.1) write(6,90)
         write(6,91) ISTEP,nelt,nels,nnn,npt1,npts
     $         ,time,dt,HXer,HYer,HZer,EXer,EYer,EZer,cpu_t,cpu_p_t
         write(6,95) ISTEP,nelt,nels,nnn,npt1,npts
     $         ,time,dt,HXmr,HYmr,HZmr,EXmr,EYmr,EZmr,cpu_t,cpu_p_t


 90      format(/,'    istep   nelt  nels  N  npt1    npts   time
     $  dt     cNerr     cPerr     cEerr     cNerr     cPerr     cEerr
     $  cpu_t   cpu_t_pts')
 91      format(/,i10,3i5,i5,i9,1p9e10.3,e9.2,' CPU: L2  '  )
 95      format(  i10,3i5,i5,i9,1p9e10.3,e9.2,' CPU: Linf'  )


        endif ! nid=0

      endif

      return
      end
c-----------------------------------------------------------------------

