c-----------------------------------------------------------------------
c
c  USER SPECIFIED ROUTINES:
c
c     - boundary conditions
c     - initial conditions
c     - variable properties
c     - forcing function for fluid (f)
c     - forcing function for passive scalar (q)
c     - general purpose routine for checking errors etc.
c
c-----------------------------------------------------------------------
      subroutine userinc
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'


      return
      end
c-----------------------------------------------------------------------
      subroutine userini(tt, myhx, myhy, myhz, myex, myey, myez)
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      real tt
      real myhx(lx1,ly1,lz1,lelt,3)
      real myhy(lx1,ly1,lz1,lelt,3)
      real myhz(lx1,ly1,lz1,lelt,3)
      real myex(lx1,ly1,lz1,lelt)
      real myey(lx1,ly1,lz1,lelt)
      real myez(lx1,ly1,lz1,lelt)

      call usersol(tt, myhx, myhy, myhz, myex, myey, myez)
       
      return
      end

c-----------------------------------------------------------------------
      subroutine usersol(tt, myshx, myshy, myshz, mysex, mysey, mysez)
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      include 'SCHROD'
      include 'GEOMBOUND'

      real tt
      real myshx(lx1,ly1,lz1,lelt,3)
      real myshy(lx1,ly1,lz1,lelt,3)
      real myshz(lx1,ly1,lz1,lelt,3)
      real mysex(lx1,ly1,lz1,lelt)
      real mysey(lx1,ly1,lz1,lelt)
      real mysez(lx1,ly1,lz1,lelt)

      real     omega, tmpH, tmpE
      real     xx, yy, zz, u    
      integer  i,ie, j, ifsmooth,k, e, ii, ind                 

      real VV,EE,tt2,alfa,dd0,K1,K2
      real RR(2),CC(2),DD(2),SS(2)
      real kkn(4),ccn(3),een(3),aan(3)

      if2dnsm=1

      kkn(1)=2.0      
      kkn(2)=2.0      
      kkn(3)=2.0      
      kkn(4)=3.0      
      ccn(1)=3.0      
      ccn(2)=3.1      
      tao1=  1.0
      tt2=tt
      een(1)=(kkn(1)**2+kkn(2)**2)/ccn(1)
      een(2)=(kkn(3)**2+kkn(4)**2)/ccn(2)
      nxyz=nx1*ny1*nz1
      nxmid=nx1/2
      nymid=ny1/2
      do ie=1,nelt
        xmid=xm1(nxmid,nymid,1,ie)
        ymid=ym1(nxmid,nymid,1,ie)
        rmid=sqrt(xmid**2+ymid**2)
        do i=1,nxyz
        xx=XM1(i,1,1,ie)
        yy=YM1(i,1,1,ie)
C       zz=ZM1(i,1,1,ie)
        if (rmid .le. tao1) then
              mysex(i,1,1,ie)=cos(een(1)*tt2+kkn(1)*xx+kkn(2)*yy)
              mysey(i,1,1,ie)=sin(een(1)*tt2+kkn(1)*xx+kkn(2)*yy)
              mysez(i,1,1,ie)=sin(een(1)*tt2+kkn(1)*xx+kkn(2)*yy)
              myshx(i,1,1,ie,1)=-kkn(1)*mysey(i,1,1,ie)
              myshy(i,1,1,ie,1)= kkn(1)*mysex(i,1,1,ie)
              myshz(i,1,1,ie,1)= kkn(1)*mysex(i,1,1,ie)
              myshx(i,1,1,ie,2)=-kkn(2)*mysey(i,1,1,ie)
              myshy(i,1,1,ie,2)= kkn(2)*mysex(i,1,1,ie)
              myshz(i,1,1,ie,2)= kkn(2)*mysex(i,1,1,ie)
         else
              mysex(i,1,1,ie)=cos(een(2)*tt2+kkn(3)*xx+kkn(4)*yy)
              mysey(i,1,1,ie)=sin(een(2)*tt2+kkn(3)*xx+kkn(4)*yy)
              mysez(i,1,1,ie)=sin(een(2)*tt2+kkn(3)*xx+kkn(4)*yy)
              myshx(i,1,1,ie,1)=-kkn(3)*mysey(i,1,1,ie)
              myshy(i,1,1,ie,1)= kkn(3)*mysex(i,1,1,ie)
              myshz(i,1,1,ie,1)= kkn(3)*mysex(i,1,1,ie)
              myshx(i,1,1,ie,2)=-kkn(4)*mysey(i,1,1,ie)
              myshy(i,1,1,ie,2)= kkn(4)*mysex(i,1,1,ie)
              myshz(i,1,1,ie,2)= kkn(4)*mysex(i,1,1,ie)
         endif
         enddo
         enddo
      return
      end
c-----------------------------------------------------------------------
      subroutine usersrc(baseidx,srchx,srchy,srchz,srcex,srcey,srcez)

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      include 'PML'

      integer baseidx
      real srchx(lx1,ly1,lz1,lelt)
      real srchy(lx1,ly1,lz1,lelt)
      real srchz(lx1,ly1,lz1,lelt)
      real srcex(lx1,ly1,lz1,lelt)
      real srcey(lx1,ly1,lz1,lelt)
      real srcez(lx1,ly1,lz1,lelt)

      common  /potential/ potV(lelt)
      real                potV


      real VV

      do ie=1,nelt
         VV=potV(ie)
      do i=1,nx1*ny1*nz1
         srchx(i,1,1,ie)= srchx(i,1,1,ie) + VV*srcey(i,1,1,ie)
         srchy(i,1,1,ie)= srchy(i,1,1,ie) - VV*srcex(i,1,1,ie)
         srchz(i,1,1,ie)= srchz(i,1,1,ie) - VV*srcex(i,1,1,ie)
      enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      include 'SCHROD'

      integer  n, ix, iy, iz, ieg

c...  in previous step planck_c=1.0 as default
c...  let us use param(31,32,....,35) for planck numbers
      planck0= 3.1  !param(31)
      planck1= 3.0  !param(32)
      planck2= 3.0  !param(33)
      planck3= 13.0 !param(34)

      iel = gllel(ieg)
      nxyz= nx1*ny1*nz1
      nxy = nx1*ny1
      nx  = nx1     
      i = ix + nx*(iy-1) + nxy*(iz-1)+nxyz*(iel-1)

      if  (if_in_region(iel).eq.1) then ! # material 1
           planck_c= planck1
      else
           planck_c= planck0 ! # material 0 
      endif
      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
C

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux=0.0
      uy=0.0
      uz=0.0
      temp=0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      real xsize, ysize, zsize
      real xmin,xmax,ymin,ymax,zmin,zmax
      real radius

      real e1

      integer n = 4*lelt

      radius = geom_xyradius()
      radius = int(10*radius+0.1)/10.
      e1 = radius*radius - 1e-4

      do ie=1,nelt
      do i=1,4
        rr = xc(i,ie)*xc(i,ie) + yc(i,ie)*yc(i,ie)
        if (rr.gt.e1) then
           rr = sqrt(rr)
           rn = radius/rr
           xc(i,ie) = rn*xc(i,ie)
           yc(i,ie) = rn*yc(i,ie)
        endif
      enddo
      enddo

    1 format(2i5,1p3e18.9,a5)

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      include 'GEOMBOUND'
      include 'SCHROD'
 
      common  /potential/ potV(lelt)
      real                potV
      
      n    = nx1*ny1*nz1*nelv
 
c     ifxyo= .true.

      xmin = glmin(xm1,n)
      xmax = glmax(xm1,n)
      ymin = glmin(ym1,n)
      ymax = glmax(ym1,n)
      zmin = glmin(zm1,n)
      zmax = glmax(zm1,n)
      sz   = 6.0/(zmax-zmin)


c     if (nid.eq.0) write(6,*) wavenumber,' This is wavenumber'

      nxyz=nx1*ny1*nz1

      do i=1,n
         zm1(i,1,1,1) = sz*(zm1(i,1,1,1)-zmin)
      enddo

      tau1= 1.0
      tau2= 1.0
      nxmid=nx1/2
      nymid=ny1/2

      do ie=1,nelt
         do iny=1,ny1
         do inx=1,nx1
         xx=xm1(inx,iny,1,ie)
         yy=ym1(inx,iny,1,ie)
         rr2=xx**2+yy**2
         if (rr2.gt.0) rr = sqrt(rr2)
c         write(6,*) 'x--',ie,inx,iny,rr
         enddo
         enddo
         xmid= xm1(nxmid,nymid,1,ie)
         ymid= ym1(nxmid,nymid,1,ie)
         rmid= sqrt(ymid**2+xmid**2)

         if  (rmid.le.tau1) then
             if_in_region(ie) =  1     ! #material 2
         else
             if_in_region(ie) =  0     ! #material 0
         endif

      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine userft           
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'


      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'SCHROD'

      common /ccpu/ cpu_t,cpu_dtime,cpu_chk
      real          cpu_t,cpu_dtime,cpu_chk
      
      integer ntott,npts3,nsrf

c ... compute errors


      if (istep.le.10.or.mod(istep,iocomm).eq.0) then

        ntott = nx1*ny1*nz1*nelt
        npts3 = npts*3
        nsrf  = nx1*nz1*nelt*6

        if (ifsol) then
          call usersol(time,sQr,sQi,sQi,sUr,sUi,sUi)
c          call cem_out
        else
          call rzero(sQr,npts3) 
          call rzero(sQi,npts3) 
          call rzero(sQi,npts3) 
          call rzero(sUr,npts ) 
          call rzero(sUi,npts ) 
          call rzero(sUi,npts )
        endif
        call sub3(ErrUr,sUr,Ur,npts)
        call sub3(ErrUi,SUi,Ui,npts)

        EXmr = glamax(ErrUr,npts)
        EYmr = glamax(ErrUi,npts)
        EZmr = glamax(ErrUi,npts)
        HXmr = EXmr
        HYmr = EYmr
        HZmr = EZmr
 
        EXer = glsc3(ErrUr,bm1,ErrUr,npts)/volvm1
        EYer = glsc3(ErrUi,bm1,ErrUi,npts)/volvm1
        EZer = glsc3(ErrUi,bm1,ErrUi,npts)/volvm1

        if (exer.gt.0) exer = sqrt(exer)
        if (eyer.gt.0) eyer = sqrt(eyer)
        if (ezer.gt.0) ezer = sqrt(ezer)
        HXer = EXer
        HYer = EYer
        HZer = EZer

c ... print statement

        snel = nelt + .5
        snel = sqrt(snel)
        nels = snel
        nnn  = nx1-1
        npt1 = nnn*nels
        npts = nx1*ny1*nz1*nelt ! npts = npt1**ndim

        if (istep.eq.0)       cpu_p_t= 0
        if (istep.gt.0)       cpu_p_t= cpu_t/(npts*istep)
        if (istep.eq.nsteps)  cpu_p_t= glsum(cpu_p_t,1)/np

        if (nid.eq.0) then

         if (istep.eq.1) write(6,90)
         write(6,91) ISTEP,nelt,nels,nnn,npt1,npts
     $         ,time,dt,HXer,HYer,HZer,EXer,EYer,EZer,cpu_t,cpu_p_t
         write(6,95) ISTEP,nelt,nels,nnn,npt1,npts
     $         ,time,dt,HXmr,HYmr,HZmr,EXmr,EYmr,EZmr,cpu_t,cpu_p_t


 90      format(/,'    istep   nelt  nels  N  npt1    npts   time
     $  dt     HXerr     HYerr     HZerr     EXerr     EYerr     EZerr
     $  cpu_t   cpu_t_pts')
 91      format(/,i10,3i5,i5,i9,1p9e10.3,e9.2,' CPU: L2  '  )
 95      format(  i10,3i5,i5,i9,1p9e10.3,e9.2,' CPU: Linf'  )

        endif ! nid=0

      endif
      return
      end

