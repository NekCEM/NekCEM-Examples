c-----------------------------------------------------------------------
c
c  USER SPECIFIED ROUTINES:
c
c     - boundary conditions
c     - initial conditions
c     - variable properties
c     - general purpose routine for checking errors etc.
c
c-----------------------------------------------------------------------
      subroutine userinc
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      include 'RK5'

      common /userparam/ omega,eps1,eps2,mu1,mu2,mydrudea,mydrudeb,ceps2
     $     ,refl,tran
      real omega,eps1,eps2,mu1,mu2,mydrudea,mydrudeb
      complex ceps2,refl,tran

      integer i,j,k
      real ky
      real yy,tt,mu,eps,eta,uinc

      tt = rktime
      do i = 1,ncemincfld
         j = cemincfld(i)
         k = cemface(j)
         yy = ym1(k,1,1,1)
         eps = permittivity(k)
         mu = permeability(k)
         eta = sqrt(mu/eps)
         ky = omega*sqrt(mu*eps)
         uinc = cos(-ky*yy-omega*tt)
         fHN(j,3) = fHN(j,3)+uinc
         fEN(j,1) = fEN(j,1)+eta*uinc
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine userini(tt,myhx,myhy,myhz,myex,myey,myez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      include 'PML'

      common /userparam/ omega,eps1,eps2,mu1,mu2,mydrudea,mydrudeb,ceps2
     $     ,refl,tran
      real omega,eps1,eps2,mu1,mu2,mydrudea,mydrudeb
      complex ceps2,refl,tran
      
      real tt
      real myhx(lx1,ly1,lz1,lelt)
      real myhy(lx1,ly1,lz1,lelt)
      real myhz(lx1,ly1,lz1,lelt)
      real myex(lx1,ly1,lz1,lelt)
      real myey(lx1,ly1,lz1,lelt)
      real myez(lx1,ly1,lz1,lelt)

      integer i,j
      real mu,eps,yy
      complex sigmadrude,ky,efac,eta,CI
      parameter (CI = (0.0,1.0))

      call usersol(tt,myhx,myhy,myhz,myex,myey,myez)
c     We need to set the extra PML fields too
      do i = 1,npts
         mu = permeability(i)
         eps = permittivity(i)
         pmlbn(i,1) = mu*myhx(i,1,1,1)
         pmlbn(i,2) = mu*myhy(i,1,1,1)
         pmlbn(i,3) = mu*myhz(i,1,1,1)
         pmldn(i,1) = eps*myex(i,1,1,1)
         pmldn(i,2) = eps*myey(i,1,1,1)
         pmldn(i,3) = eps*myez(i,1,1,1)
      enddo

c     Initialize the current
      do i = 1,ncemdrude
         j = cemdrude(i)

         ky = omega*csqrt(mu2*ceps2)
         eta = csqrt(mu2/ceps2)
         yy = ym1(j,1,1,1)
         efac = tran*eta*cexp(CI*(-ky*yy-omega*tt))
         sigmadrude = drudeb(j)/(drudea(j)-CI*omega)
         jn1(j,1) = dble(sigmadrude*efac)
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usersol(tt,myshx,myshy,myshz,mysex,mysey,mysez)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      include 'GEOMBOUND'
      include 'PML'

      common /userparam/ omega,eps1,eps2,mu1,mu2,mydrudea,mydrudeb,ceps2
     $     ,refl,tran
      real omega,eps1,eps2,mu1,mu2,mydrudea,mydrudeb
      complex ceps2,refl,tran

      real tt
      real myshx(lx1,ly1,lz1,lelt)
      real myshy(lx1,ly1,lz1,lelt)
      real myshz(lx1,ly1,lz1,lelt)
      real mysex(lx1,ly1,lz1,lelt)
      real mysey(lx1,ly1,lz1,lelt)
      real mysez(lx1,ly1,lz1,lelt)

      integer e,i,j,l,lx1_2
      real yy,d,pmlfac,pmlsigmamax
      complex ky,eta,usc,CI
      parameter (CI = (0.0,1.0))

      lx1_2 = lx1/2
      do e = 1,nelt
         do j = 1,ly1
            do i = 1,lx1
c     Global number
               l = i+nx1*(j-1)+nx1*ny1*(e-1)
               yy = ym1(i,j,1,e)
               if (ym1(lx1_2,lx1_2,1,e).gt.0.0) then
                  eta = sqrt(mu1/eps1)
                  ky = omega*sqrt(eps1*mu1)
                  if (pmltag(e).ne.0) then
                     d = pmlouter(4)-pmlinner(4)
                     pmlsigmamax =
     $                    -(pmlorder+1)*log(pmlreferr)/(2*eta*d)
                     pmlfac = (pmlsigmamax*d/(pmlorder+1))
     $                    *((yy-pmlinner(4))/d)**(pmlorder+1)
                  else
                     pmlfac = 0.0
                  endif
                  usc = refl*cexp(CI*(ky*yy-omega*tt)-eta*pmlfac)
                  myshz(i,j,1,e) = dble(usc)
                  mysex(i,j,1,e) = dble(-eta*usc)
               else
                  eta = csqrt(mu2/ceps2)
                  ky = omega*csqrt(ceps2*mu2)
                  usc = tran*cexp(CI*(-ky*yy-omega*tt))
                  myshz(i,j,1,e) = dble(usc)
                  mysex(i,j,1,e) = dble(eta*usc)
               endif
            enddo
         enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine usersrc(baseidx,srchx,srchy,srchz,srcex,srcey,srcez)
c-----------------------------------------------------------------------
c     Add source terms to the fields given in src{e,h}{x,y,z}. Read file
c     doc/rea-file.txt for specification. Since we want to make it
c     possible to have several sources, we specify a `baseidx' relative
c     to which all parameters are read.
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      integer baseidx
      real srchx(lx1,ly1,lz1,lelt),
     $     srchy(lx1,ly1,lz1,lelt),
     $     srchz(lx1,ly1,lz1,lelt),
     $     srcex(lx1,ly1,lz1,lelt),
     $     srcey(lx1,ly1,lz1,lelt),
     $     srcez(lx1,ly1,lz1,lelt)

      return
      end
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,ielg)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      common /userparam/ omega,eps1,eps2,mu1,mu2,mydrudea,mydrudeb,ceps2
     $     ,refl,tran
      real omega,eps1,eps2,mu1,mu2,mydrudea,mydrudeb
      complex ceps2,refl,tran

      integer ix,iy,iz,ielg

      integer iel,nx1_2,l

c     Get local element number from global element number
      iel = gllel(ielg)
      nx1_2 = nx1/2
      if (ym1(nx1_2,nx1_2,1,iel).gt.0) then
c     Upper region, dieletric material
         permit_r = eps1
         permea_r = mu1
      else
c     Lower region, Drude material
         l = ix+nx1*(iy-1)+nx1*ny1*(iz-1)+nx1*ny1*nz1*(iel-1)
         vdispmarker(l) = 1
         drude_alpha = mydrudea
         drude_beta = mydrudeb
         permit_r = eps2
         permea_r = mu2
      endif
      permit = permit_r*permit_0
      permea = permea_r*permea_0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq(ix,iy,iz,ieg)
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      qvol = 0.0
      source = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric(ix,iy,iz,ieg)
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc(ix,iy,iz,iside,ieg)
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux = 0.0
      uy = 0.0
      uz = 0.0
      temp = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      common /userparam/
     $     omega,               ! frequency of the incident wave
     $     eps1,                ! permittivity in upper region
     $     eps2,                ! permittivity in lower region
     $     mu1,                 ! permeability in upper region
     $     mu2,                 ! permeability in lower region
     $     mydrudea,            ! loss
     $     mydrudeb,            ! square of the plasma frequency
c     Complex dielectric coefficient in the Drude material, i.e.
c     ceps2 = eps2 + chi(omega) where chi is the susceptibility. For the
c     Drude model we have
c
c     chi(omega) = -mydrudeb/(omega*(omega+CI*mydrudea))
c
     $     ceps2,
     $     refl,                ! reflection coefficient
     $     tran                ! transmission coefficient
      real omega,eps1,eps2,mu1,mu2,mydrudea,mydrudeb
      complex ceps2,refl,tran

      complex z1,z2,CI
      parameter (CI = (0.0,1.0))

      omega = 5.0
      eps1 = 1.0
      eps2 = 1.0
      mu1 = 1.0
      mu2 = 1.0
      mydrudea = 0.0
      mydrudeb = 100.0
      ceps2 = eps2-mydrudeb/(omega*(omega+CI*mydrudea))

      z1 = sqrt(mu1/eps1)
      z2 = csqrt(mu2/ceps2)
      refl = (z1-z2)/(z1+z2)
      tran = 2*z1/(z1+z2)

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
c-----------------------------------------------------------------------
c     Use this subroutine to set the dimensions of the domain.
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      include 'GEOMBOUND'

      integer e,f,i,j,n,nxy2
      real glmin,glmax
      real sx,sy,sz,xmid,ymid,zmid

      n = nx1*ny1*nz1*nelv

      xmin = glmin(xm1,n)
      xmax = glmax(xm1,n)
      ymin = glmin(ym1,n)
      ymax = glmax(ym1,n)
      zmin = glmin(zm1,n)
      zmax = glmax(zm1,n)

      sx = 5.0
      sy = 10.0
      if (if3d) sz = 5.0

      do i = 1,n
         xm1(i,1,1,1) = sx*(xm1(i,1,1,1)-xmin)/(xmax-xmin)-(sx/2.0)
         ym1(i,1,1,1) = sy*(ym1(i,1,1,1)-ymin)/(ymax-ymin)-(sy/2.0)
         if (if3d) then
            zm1(i,1,1,1) = sz*(zm1(i,1,1,1)-zmin)/(zmax-zmin)-(sz/2.0)
         endif
      enddo


      call userfmarker


      return
      end
c-----------------------------------------------------------------------
      subroutine userfmarker
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      include 'GEOMBOUND'

      logical markinc,mark2d
      integer e,f,i,j,k,nx1_2

      nx1_2 = nx1/2
c     Mark the faces where the incident field needs to be added
      do e = 1,nelt
         if (ym1(nx1_2,nx1_2,1,e).gt.0.0) then
            markinc = .true.
            do f = 1,nfaces
               do i = 1,nxzf
c     j is the global face number
                  j = (e-1)*nxzf*nfaces+nxzf*(f-1)+i
c     k is the volume global number associated with face j.
                  k = cemface(j)
                  if (abs(ym1(k,1,1,1)).gt.1e-8) then
                     markinc = .false.
                     exit
                  endif
               enddo
               if (markinc) then
                  do i = 1,nxzf
                     j = (e-1)*nxzf*nfaces+nxzf*(f-1)+i
                     fincmarker(j) = 1
                  enddo
               endif
            enddo
         endif
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine userft
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'


      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
c-----------------------------------------------------------------------
      implicit none
      
      call print_errors(.true.,.true.)

      return
      end
c-----------------------------------------------------------------------
