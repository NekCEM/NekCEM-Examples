c-----------------------------------------------------------------------
c
c  USER SPECIFIED ROUTINES:
c
c     - boundary conditions
c     - initial conditions
c     - variable properties
c     - forcing function for fluid (f)
c     - forcing function for passive scalar (q)
c     - general purpose routine for checking errors etc.
c
c-----------------------------------------------------------------------
      subroutine userinc
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'


      return
      end
c-----------------------------------------------------------------------
      subroutine usersrc(baseidx,srchx,srchy,srchz,srcex,srcey,srcez)

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'


      return
      end
c-----------------------------------------------------------------------
      subroutine usersol(tt, myshx, myshy, myshz, mysex, mysey, mysez)

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      real tt
      real myshx(lx1,ly1,lz1,lelt)
      real myshy(lx1,ly1,lz1,lelt)
      real myshz(lx1,ly1,lz1,lelt)
      real mysex(lx1,ly1,lz1,lelt)
      real mysey(lx1,ly1,lz1,lelt)
      real mysez(lx1,ly1,lz1,lelt)

      real     omega, tmpH, tmpE
      real     xx, yy, zz, u    
      integer  i, j, k, e, ii, ind                 
      logical is_present,acc_nek_present

      is_present = acc_nek_present(myshx,1).and.
     $     acc_nek_present(myshy,1).and.
     $     acc_nek_present(myshx,1).and.
     $     acc_nek_present(mysex,1).and.
     $     acc_nek_present(mysey,1).and.
     $     acc_nek_present(mysez,1).and.
     $     acc_nek_present(xm1,1)

!$ACC  DATA PRESENT(myshx,myshy,myshz,mysex,mysey,mysez) 
!$ACC&      PRESENT(XM1,YM1,ZM1) if(is_present)
      if (ndim.eq.3) then
        omega = 3             
        omega = sqrt(omega)
   
        tmpH=sin(omega*tt)/omega
        tmpE=cos(omega*tt)   

!$ACC PARALLEL LOOP GANG WORKER VECTOR if(is_present)
        do i=1,nx1*ny1*nz1*nelt
          xx=XM1(i,1,1,1)
          yy=YM1(i,1,1,1)
          zz=ZM1(i,1,1,1)

          myshx(i,1,1,1) = 2*cos(xx)*sin(yy)*cos(zz)*tmpH  
          myshy(i,1,1,1) = - sin(xx)*cos(yy)*cos(zz)*tmpH  
          myshz(i,1,1,1) =   sin(xx)*sin(yy)*sin(zz)*tmpH  
          mysex(i,1,1,1) =   0.0
          mysey(i,1,1,1) =   cos(xx)*sin(yy)*sin(zz)*tmpE  
          mysez(i,1,1,1) =   cos(xx)*cos(yy)*cos(zz)*tmpE  
        enddo
!$ACC END PARALLEL LOOP
      else 

        omega = 2                                
        omega = sqrt(omega)

        if (iftm) then
          tmpH=sin(omega*tt)/omega
          tmpE=cos(omega*tt)   

!$ACC PARALLEL LOOP GANG WORKER VECTOR if(is_present)
          do i=1,nx1*ny1*nz1*nelt
            xx=XM1(i,1,1,1)
            yy=YM1(i,1,1,1)
            zz=ZM1(i,1,1,1)

            myshx(i,1,1,1) = 2*cos(xx)*sin(yy)*tmpH  
            myshy(i,1,1,1) = - sin(xx)*cos(yy)*tmpH  
            myshz(i,1,1,1) =   0.0
            mysex(i,1,1,1) =   0.0
            mysey(i,1,1,1) =   0.0
            mysez(i,1,1,1) =   cos(xx)*cos(yy)*tmpE  
          enddo
!$ACC END PARALLEL LOOP
        elseif (ifte) then

          tmpH=cos(omega*tt)
          tmpE=sin(omega*tt)/omega
!$ACC PARALLEL LOOP GANG WORKER VECTOR if(is_present)
          do i=1,nx1*ny1*nz1*nelt
            xx=XM1(i,1,1,1)
            yy=YM1(i,1,1,1)
            zz=ZM1(i,1,1,1)

            myshx(i,1,1,1) =   0.0
            myshy(i,1,1,1) =   0.0
            myshz(i,1,1,1) =   sin(xx)*sin(yy)*tmpH  
            mysex(i,1,1,1) =   sin(xx)*cos(yy)*tmpE 
            mysey(i,1,1,1) =  -cos(xx)*sin(yy)*tmpE  
            mysez(i,1,1,1) =   0.0
          enddo
!$ACC END PARALLEL LOOP
        else
          call exitt
        endif
      endif
!$ACC END DATA
      return
      end

c-----------------------------------------------------------------------
      subroutine userini(tt, myhx, myhy, myhz, myex, myey, myez)
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      real tt
      real myhx(lx1,ly1,lz1,lelt)
      real myhy(lx1,ly1,lz1,lelt)
      real myhz(lx1,ly1,lz1,lelt)
      real myex(lx1,ly1,lz1,lelt)
      real myey(lx1,ly1,lz1,lelt)
      real myez(lx1,ly1,lz1,lelt)

      call usersol(tt,myhx, myhy, myhz, myex, myey, myez)

      return
      end

c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      integer  n, ix, iy, iz, ieg
      real     one, xcc, ycc, zcc, x1, y1, z1
      real     lambda, fc, wc                     

      iel     = gllel(ieg)
      call usermedia   (ix,iy,iz,iel)

      if (IFPML)    call userpml   (ix,iy,iz,iel)
      if (IFDRUDE)  call userdrude (ix,iy,iz,iel)

      return
      end

c-----------------------------------------------------------------------

      subroutine usermedia(ix,iy,iz,iel) ! Vector form of userf
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      integer  n, ix, iy,iz, ieg
      real     one, xcc, ycc, zcc, x1, y1, z1
      real     lambda, fc, wc                     

      udiff  = 0.
      utrans = 0.

      permea = permea_0             
      permit = permit_0                

      return
      end

c-----------------------------------------------------------------------
      subroutine userdrude(ix,iy,iz,iel) ! Vector form of userf

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      return
      end

c-----------------------------------------------------------------------

      subroutine userpml(ix,iy,iz,iel) ! Vector form of userf
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      character*5 pmlside   

      n= nx1*ny1*nz1*nelt

      pmlR0 = 10.0**(-15)
      pmlM  = 2.0

      return
      end

c-----------------------------------------------------------------------
      subroutine userf  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      integer ix, iy, iz, ieg
C
      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
C
      qvol   = 0.0
      source = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
C
      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      ux=0.0
      uy=0.0
      uz=0.0
      temp=0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      return
      end

c-----------------------------------------------------------------------
      subroutine usrdat2

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      include 'GEOMBOUND'

      n    = nx1*ny1*nz1*nelv

      ifxyo= .true.

      xmin = glmin(xm1,n)
      xmax = glmax(xm1,n)
      ymin = glmin(ym1,n)
      ymax = glmax(ym1,n)
      zmin = glmin(zm1,n)
      zmax = glmax(zm1,n)

      sx = 2*pi/(xmax-xmin)
      sy = 2*pi/(ymax-ymin)       
      if (if3d) sz = 2*pi/(zmax-zmin)            
      nmscale = 1.0/(xmax-xmin)                            

      if (if3d) then

      do i=1,n
         xm1(i,1,1,1) = sx*(xm1(i,1,1,1)-xmin)                
         ym1(i,1,1,1) = sy*(ym1(i,1,1,1)-ymin)                        
         zm1(i,1,1,1) = sz*(zm1(i,1,1,1)-zmin)
      enddo

      else

      do i=1,n
         xm1(i,1,1,1) = sx*xm1(i,1,1,1)               
         ym1(i,1,1,1) = sy*ym1(i,1,1,1)                        
      enddo
      endif

      xmin = glmin(xm1,n)
      xmax = glmax(xm1,n)
      ymin = glmin(ym1,n)
      ymax = glmax(ym1,n)

      return
      end

c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      common /ccpu/ cpu_t,cpu_dtime,cpu_chk
      logical is_present,acc_nek_present

      is_present = acc_nek_present(ErrHN,1).and.
     $     acc_nek_present(ErrEN,1).and.
     $     acc_nek_present(SHN,1).and.
     $     acc_nek_present(SEN,1).and.
     $     acc_nek_present(HH,1).and.
     $     acc_nek_present(EN,1).and.
     $     acc_nek_present(bm1,1)

c ... compute errors

!$ACC DATA PRESENT(ErrHN,ErrEN,SHN,SEN,HN,EN) if(is_present)
      if (istep.le.10.or.mod(istep,iocomm).eq.0) then

        npts  = nx1*ny1*nz1*nelt
        npts3 = nx1*ny1*nz1*nelt*3
        nsrf  = nx1*nz1*nelt*6

        if (ifsol) then
          call usersol(time,sHN(1,1),sHN(1,2),sHN(1,3),
     $                      sEN(1,1),sEN(1,2),sEN(1,3))
        else
          call rzero(sHN, npts3) 
          call rzero(sEN, npts3) 
        endif

        call sub3(ErrHN(1,1),SHN(1,1),HN(1,1),npts)
        call sub3(ErrHN(1,2),SHN(1,2),HN(1,2),npts)
        call sub3(ErrHN(1,3),SHN(1,3),HN(1,3),npts)
        call sub3(ErrEN(1,1),SEN(1,1),EN(1,1),npts)
        call sub3(ErrEN(1,2),SEN(1,2),EN(1,2),npts)
        call sub3(ErrEN(1,3),SEN(1,3),EN(1,3),npts)

        HXmr = glamax(ErrHN(1,1),npts)
        HYmr = glamax(ErrHN(1,2),npts)
        HZmr = glamax(ErrHN(1,3),npts)
        EXmr = glamax(ErrEN(1,1),npts)
        EYmr = glamax(ErrEN(1,2),npts)
        EZmr = glamax(ErrEN(1,3),npts)
 
        HXer = glsc3(ErrHN(1,1),bm1,ErrHN(1,1),npts)/ volvm1
        HYer = glsc3(ErrHN(1,2),bm1,ErrHN(1,2),npts)/ volvm1
        HZer = glsc3(ErrHN(1,3),bm1,ErrHN(1,3),npts)/ volvm1
        EXer = glsc3(ErrEN(1,1),bm1,ErrEN(1,1),npts)/ volvm1
        EYer = glsc3(ErrEN(1,2),bm1,ErrEN(1,2),npts)/ volvm1
        EZer = glsc3(ErrEN(1,3),bm1,ErrEN(1,3),npts)/ volvm1

        if (hxer.gt.0) hxer = sqrt(hxer)
        if (hyer.gt.0) hyer = sqrt(hyer)
        if (hzer.gt.0) hzer = sqrt(hzer)
        if (exer.gt.0) exer = sqrt(exer)
        if (eyer.gt.0) eyer = sqrt(eyer)
        if (ezer.gt.0) ezer = sqrt(ezer)

c ... print statement

        snel = nelt + .5
        snel = sqrt(snel)
        nels = snel
        nnn  = nx1-1
        npt1 = nnn*nels
        npts = nx1*ny1*nz1*nelt ! npts = npt1**ndim

        if (istep.eq.0)       cpu_p_t= 0
        if (istep.gt.0)       cpu_t_step= cpu_t/(istep)
        if (istep.eq.nsteps)  cpu_p_t= glsum(cpu_t_step/npts,1)/np

        if (nid.eq.0) then

         write(6,90)
        
         write(6,91) ISTEP,nelt,nels,nnn,npt1,npts
     $         ,time,dt,HXer,HYer,HZer,EXer,EYer,EZer,cpu_t,cpu_p_t
         write(6,95) ISTEP,nelt,nels,nnn,npt1,npts
     $         ,time,dt,HXmr,HYmr,HZmr,EXmr,EYmr,EZmr,cpu_t,cpu_p_t


 90      format(/,'    istep   nelt  nels  N  npt1    npts   time
     $  dt     HXerr     HYerr     HZerr     EXerr     EYerr     EZerr
     $  cpu_t   cpu_t_pts')
 91      format(  i10,3i5,i5,i9,1p10e18.5,' CPU: L2  '  )
 95      format(  i10,3i5,i5,i9,1p10e18.5,' CPU: Linf'  )

        endif ! nid=0

      endif
!$ACC END DATA

      return
      end

c-----------------------------------------------------------------------
