c-----------------------------------------------------------------------
c
c  User Specified Routines:
c
c     - boundary conditions
c     - initial conditions
c     - variable properties
c     - general purpose routine for checking errors etc.
c
c-----------------------------------------------------------------------
      subroutine userinc
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      include 'RK5'

      integer i,j,k
      real ky,omega
      real yy,tt,mu,eps
      real sinfac

      omega = 3.0

      tt = rktime
      do i = 1,ncemincfld
         j = cemincfld(i)
         k = cemface(j)
         yy = ym1(k,1,1,1)
         eps = permittivity(k)
         mu = permeability(k)
         ky = -omega*sqrt(mu*eps)
         sinfac = sin(ky*yy-omega*tt)
         fHN(j,3) = fHN(j,3)+sinfac
         fEN(j,1) = fEN(j,1)-ky*sinfac/(eps*omega)
      enddo
      
      return
      end
c-----------------------------------------------------------------------
      subroutine userini(tt, myhx, myhy, myhz, myex, myey, myez)
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      real tt
      real myhx(lx1,ly1,lz1,lelt)
      real myhy(lx1,ly1,lz1,lelt)
      real myhz(lx1,ly1,lz1,lelt)
      real myex(lx1,ly1,lz1,lelt)
      real myey(lx1,ly1,lz1,lelt)
      real myez(lx1,ly1,lz1,lelt)
      integer i,j,k,l

      call rzero(myhx,n)
      call rzero(myhy,n)
      call rzero(myhz,n)
      call rzero(myex,n)
      call rzero(myey,n)
      call rzero(myez,n)

      return
      end
c-----------------------------------------------------------------------
      subroutine usersol(tt, myshx, myshy, myshz, mysex, mysey, mysez)
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      include 'GEOMBOUND'

      real tt
      real myshx(lx1,ly1,lz1,lelt)
      real myshy(lx1,ly1,lz1,lelt)
      real myshz(lx1,ly1,lz1,lelt)
      real mysex(lx1,ly1,lz1,lelt)
      real mysey(lx1,ly1,lz1,lelt)
      real mysez(lx1,ly1,lz1,lelt)

      return
      end
c-----------------------------------------------------------------------
      subroutine usersrc(baseidx,srchx,srchy,srchz,srcex,srcey,srcez)
c-----------------------------------------------------------------------
c     Add source terms to the fields given in src{e,h}{x,y,z}. Read file
c     doc/rea-file.txt for specification. Since we want to make it
c     possible to have several sources, we specify a `baseidx', relative
c     to which all parameters are read.
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      include 'PML'
      include 'RK5'

      integer baseidx

      real srchx(lx1,ly1,lz1,lelt),
     $     srchy(lx1,ly1,lz1,lelt),
     $     srchz(lx1,ly1,lz1,lelt),
     $     srcex(lx1,ly1,lz1,lelt),
     $     srcey(lx1,ly1,lz1,lelt),
     $     srcez(lx1,ly1,lz1,lelt)

      ! Extent of domain
      integer nxyzl
      save    nxyzl

      real    xsize, ysize, zsize
      save    xsize, ysize, zsize
      real    xmin, xmax, ymin, ymax, zmin, zmax
      save    xmin, xmax, ymin, ymax, zmin, zmax

      integer icalld
      save    icalld
      data    icalld /0/             

      integer fldchs

      real    xx, yy, zz
      real    xloc,yloc,zloc,xw,yw,zw,xwidth,ywidth,zwidth          
      real    xgauss, ygauss, zgauss
      real    kx , ky , kz 
      real    twopi
      real    tconst,tfactor,fldhere
      real    wavelength
      real    temporal_freq

c     Presetting
      twopi  = 2.0*pi

c     Spatial mode set
      xloc  = 0.0 ! param(66); smodty = 2: gaussian 
      yloc  = 1.5 ! param(67)          
      zloc  = 0.0 ! param(68)             
      xw    = 0.0 ! param(69)  
      yw    = 0.0 ! param(70)  
      zw    = 0.0 ! param(71)  
      xwidth= 1 ! param(72)          
      ywidth= 1 ! param(73)            
      zwidth= 1 ! param(74)            
c     Spatial mode set  
      kx    = 0.0 ! param(66); smodty = 3: planewave
      ky    = 0.0 ! param(67)                  
      kz    = 0.0 ! param(68)              

      wavelength = nmscale  ! param(69)*nmscale
      temporal_freq = cspeed ! param(64)*cspeed; tmodty = 3: cosine pulse

c     Evaluate temporal modulation.
      call cosine_pulse (tfactor,rktime,twopi,temporal_freq)

c     Evaluate spatial modulation.
      xgauss = xloc + xw*rktime                                       
      ygauss = yloc + yw*rktime                                       
      zgauss = zloc + zw*rktime                                       

      npts = nx1*ny1*nz1*nelt
      do i = 1,npts         
         xx = xm1(i,1,1,1)
         yy = ym1(i,1,1,1)
         zz = zm1(i,1,1,1)

         tconst  = tfactor*bm1(i,1,1,1) ! *fldhere

         src_x = exp(-(2.0*(xx-xgauss)/xwidth)**2)   
         src_y = exp(-(2.0*(yy-ygauss)/ywidth)**2)
         src_z = exp(-(2.0*(zz-zgauss)/zwidth)**2)

         inchn(i,1) = 0                  
         inchn(i,2) = 0                  
         inchn(i,3) = src_x*src_y*src_z              
         incen(i,1) = 0                  
         incen(i,2) = 0                  
         incen(i,3) = 0                  
         fullary(i,1,1,1) = tconst*inchn(i,3)            
      enddo

c     Add fullary to selected field
      fldchs=3

      if (fldchs.eq.1) call fadd2(srchx,fullary,npts)
      if (fldchs.eq.2) call fadd2(srchy,fullary,npts)
      if (fldchs.eq.3) call fadd2(srchz,fullary,npts)
      if (fldchs.eq.4) call fadd2(srcex,fullary,npts)
      if (fldchs.eq.5) call fadd2(srcey,fullary,npts)
      if (fldchs.eq.6) call fadd2(srcez,fullary,npts)

      return
      end
c-----------------------------------------------------------------------
      subroutine cosine_pulse(tfactor,tt,twopi,param1)
c-----------------------------------------------------------------------
      real tfacfor,tt,twopi,param1

      tfactor= cos(twopi*param1*tt)             

      return
      end
c-----------------------------------------------------------------------
      subroutine uservp(ix,iy,iz,ielg)
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      integer ix,iy,iz,ielg,iel,nx1_2
      
c     Get local element number from global element number
      iel = gllel(ielg)

      nx1_2 = nx1/2
      if (ym1(nx1_2,nx1_2,nx1_2,iel).gt.0) then
         permit_r = 1.0
         permea_r = 1.0
      else
         permit_r = 2.0
         permea_r = 1.0
      endif
      permit = permit_r*permit_0
      permea = permea_r*permea_0

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      qvol   = 0.0
      source = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux=0.0
      uy=0.0
      uz=0.0
      temp=0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

c     Set the parameters for the graphene
      a_d = 0.000e+00
      b_d = 1.499e+00
      b_cp1 = -2.599e-03
      a_211 = 4.632e+05
      a_221 = 1.090e+03
      b_11 = -1.391e+00
      b_21 = -3.125e+02
      b_cp2 = -1.049e-03
      a_212 = 4.271e+05
      a_222 = 2.742e+02
      b_12 = -7.769e-02
      b_22 = 4.268e+02
      
      return
      end

c-----------------------------------------------------------------------
      subroutine usrdat2
c-----------------------------------------------------------------------
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      include 'GEOMBOUND'

      integer e,i,n,nxy2
      real glmin,glmax
      real sx,sy,sz,xmid,ymid,zmid

      n = nx1*ny1*nz1*nelv
      xmin = glmin(xm1,n)
      xmax = glmax(xm1,n)
      ymin = glmin(ym1,n)
      ymax = glmax(ym1,n)
      zmin = glmin(zm1,n)
      zmax = glmax(zm1,n)

      sx = 6.0
      sy = 6.0
      if (if3d) sz = 6.0

      if (if3d) then
         do i = 1,n
            xm1(i,1,1,1) = sx*(xm1(i,1,1,1)-xmin)/(xmax-xmin)-(sx/2.0)
            ym1(i,1,1,1) = sy*(ym1(i,1,1,1)-ymin)/(ymax-ymin)-(sy/2.0)
            zm1(i,1,1,1) = sz*(zm1(i,1,1,1)-zmin)/(zmax-zmin)-(sz/2.0)
         enddo
      else
         do i = 1,n
            xm1(i,1,1,1) = sx*(xm1(i,1,1,1)-xmin)/(xmax-xmin)-(sx/2.0)
            ym1(i,1,1,1) = sy*(ym1(i,1,1,1)-ymin)/(ymax-ymin)-(sz/2.0)
         enddo
      endif

      return
      end
c-----------------------------------------------------------------------
      function ongraph(xx,yy,zz)
c-----------------------------------------------------------------------
c     Check whether a point lies on the graphene regions. The pattern is
c     a 3 x 3 checkerboard pattern with graphene in the corners.
      implicit none

      logical ongraph
      real xx,yy,zz
      real tol

      tol = 1e-8
      if (abs(yy).gt.tol) then
         ongraph = .false.
      elseif (1.0-tol.lt.abs(xx).and.abs(xx).lt.3.0+tol
     $        .and.1.0-tol.lt.abs(zz).and.abs(zz).lt.3.0+tol) then
         ongraph = .true.
      elseif (abs(xx).lt.1.0+tol.and.abs(zz).lt.1.0+tol) then
         ongraph = .true.
      else
         ongraph = .false.
      endif

 
      call userfmarker


      return
      end
c-----------------------------------------------------------------------
      subroutine userfmarker
c-----------------------------------------------------------------------
c     In this routine the user should mark faces that will either need
c     the incident field added to them or have 2D materials on them.
c     Markers for the incident field should be put into the array
c     `fincmarker`; a value of 0 means that no incident field needs to
c     be added and a value of 1 means that the incident field needs to
c     be added. Markers for 2D materials should be mput into the array
c     `f2dmarker`; the currently available values are
c
c     0 -> no 2D material
c     1 -> graphene
c
c     The arrays `fincmarker` and `f2dmarker` are initialized to 0, so
c     if there is no incident field and there are no 2D materials then
c     this subroutine can be left blank.
      implicit none
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      include 'GEOMBOUND'

      logical markinc,mark2d,ongraph
      integer e,f,i,j,k,nx1_2

      nx1_2 = nx1/2
      do e = 1,nelt
c     *****
c     First mark faces which need the incident field added
c     *****
         if (ym1(nx1_2,nx1_2,nx1_2,e).gt.0.0) then
            do f = 1,nfaces
               markinc = .true.
               do i = 1,nxzf
c     j is the global face number
                  j = (e-1)*nxzf*nfaces+nxzf*(f-1)+i
c     k is the volume global number associated with face j.
                  k = cemface(j)
                  if (abs(ym1(k,1,1,1)).gt.1e-8) then
                     markinc = .false.
                  endif
               enddo
               if (markinc) then
                  do i = 1,nxzf
                     j = (e-1)*nxzf*nfaces+nxzf*(f-1)+i
                     fincmarker(j) = 1
                  enddo
               endif
            enddo
         endif
c     *****
c     Now mark faces which contain 2D materials
c     *****
         do f = 1,nfaces
            mark2d = .true.
            do i = 1,nxzf
               j = (e-1)*nxzf*nfaces+nxzf*(f-1)+i
               k = cemface(j)
               if (.not.ongraph(xm1(k,1,1,1),ym1(k,1,1,1),
     $              zm1(k,1,1,1))) then
                  mark2d = .false.
                  exit
               endif
            enddo
            if (mark2d) then
               do i = 1,nxzf
                  j = (e-1)*nxzf*nfaces+nxzf*(f-1)+i
                  f2dmarker(j) = 1
               enddo
            endif
         enddo
      enddo

      return
      end
c-----------------------------------------------------------------------
      subroutine userft
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      common /ccpu/ cpu_t,cpu_dtime,cpu_chk

c ... compute errors

      if (istep.le.10.or.mod(istep,iocomm).eq.0) then

        ntott = nx1*ny1*nz1*nelt
        npts3 = nx1*ny1*nz1*nelt*3
        nsrf  = nx1*nz1*nelt*6

        if (ifsol) then
          call usersol(time,sHN(1,1),sHN(1,2),sHN(1,3),
     $                      sEN(1,1),sEN(1,2),sEN(1,3))
        else
          call rzero(sHN, npts3) 
          call rzero(sEN, npts3) 
        endif

        call sub3(ErrHN(1,1),SHN(1,1),HN(1,1),NTOTT)
        call sub3(ErrHN(1,2),SHN(1,2),HN(1,2),NTOTT)
        call sub3(ErrHN(1,3),SHN(1,3),HN(1,3),NTOTT)
        call sub3(ErrEN(1,1),SEN(1,1),EN(1,1),NTOTT)
        call sub3(ErrEN(1,2),SEN(1,2),EN(1,2),NTOTT)
        call sub3(ErrEN(1,3),SEN(1,3),EN(1,3),NTOTT)

        HXmr = glamax(ErrHN(1,1),NTOTT)
        HYmr = glamax(ErrHN(1,2),NTOTT)
        HZmr = glamax(ErrHN(1,3),NTOTT)
        EXmr = glamax(ErrEN(1,1),NTOTT)
        EYmr = glamax(ErrEN(1,2),NTOTT)
        EZmr = glamax(ErrEN(1,3),NTOTT)
 
        HXer = glsc3(ErrHN(1,1),bm1,ErrHN(1,1),NTOTT)/ volvm1
        HYer = glsc3(ErrHN(1,2),bm1,ErrHN(1,2),NTOTT)/ volvm1
        HZer = glsc3(ErrHN(1,3),bm1,ErrHN(1,3),NTOTT)/ volvm1
        EXer = glsc3(ErrEN(1,1),bm1,ErrEN(1,1),NTOTT)/ volvm1
        EYer = glsc3(ErrEN(1,2),bm1,ErrEN(1,2),NTOTT)/ volvm1
        EZer = glsc3(ErrEN(1,3),bm1,ErrEN(1,3),NTOTT)/ volvm1

        if (hxer.gt.0) hxer = sqrt(hxer)
        if (hyer.gt.0) hyer = sqrt(hyer)
        if (hzer.gt.0) hzer = sqrt(hzer)
        if (exer.gt.0) exer = sqrt(exer)
        if (eyer.gt.0) eyer = sqrt(eyer)
        if (ezer.gt.0) ezer = sqrt(ezer)

c ... print statement

        snel = nelt + .5
        snel = sqrt(snel)
        nels = snel
        nnn  = nx1-1
        npt1 = nnn*nels
        npts = nx1*ny1*nz1*nelt ! npts = npt1**ndim

        if (istep.eq.0)       cpu_p_t= 0
        if (istep.gt.0)       cpu_p_t= cpu_t/(npts*istep)
        if (istep.eq.nsteps)  cpu_p_t= glsum(cpu_p_t,1)/np

c$$$        if (nid.eq.0) then
c$$$
c$$$         if (istep.eq.1) write(6,90)
c$$$         write(6,91) ISTEP,nelt,nels,nnn,npt1,npts
c$$$     $         ,time,dt,HXer,HYer,HZer,EXer,EYer,EZer,cpu_t,cpu_p_t
c$$$         write(6,95) ISTEP,nelt,nels,nnn,npt1,npts
c$$$     $         ,time,dt,HXmr,HYmr,HZmr,EXmr,EYmr,EZmr,cpu_t,cpu_p_t
c$$$
c$$$
c$$$ 90      format(/,'    istep   nelt  nels  N  npt1    npts   time
c$$$     $  dt     HXerr     HYerr     HZerr     EXerr     EYerr     EZerr
c$$$     $  cpu_t   cpu_t_pts')
c$$$ 91      format(/,i10,3i5,i5,i9,1p9e10.3,e9.2,' CPU: L2  '  )
c$$$ 95      format(  i10,3i5,i5,i9,1p9e10.3,e9.2,' CPU: Linf'  )
c$$$
c$$$
c$$$        endif ! nid=0

      endif

      return
      end
c-----------------------------------------------------------------------
