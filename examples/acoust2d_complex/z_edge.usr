c-----------------------------------------------------------------------
c
c  USER SPECIFIED ROUTINES:
c
c     - boundary conditions
c     - initial conditions
c     - variable properties
c     - forcing function for fluid (f)
c     - forcing function for passive scalar (q)
c     - general purpose routine for checking errors etc.
c
c-----------------------------------------------------------------------
      subroutine userinc
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'


      return
      end
c-----------------------------------------------------------------------
      subroutine userini(tt, myhx, myhy, myhz, myex, myey, myez)
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      include 'ZCOUSTIC'

      integer len 
      parameter (len= 200)
      real tt,energy_err,flag(6)
      real lambda(len),reflectivity(len) 
      real kw3_r(len),kw3_i(len),kw4_r(len),kw4_i(len)
      real kw3_r0(len),kw3_i0(len),kw4_r0(len),kw4_i0(len)
 
      real myhx(lx1,ly1,lz1,lelt)
      real myhy(lx1,ly1,lz1,lelt)
      real myhz(lx1,ly1,lz1,lelt)
      real myex(lx1,ly1,lz1,lelt)
      real myey(lx1,ly1,lz1,lelt)
      real myez(lx1,ly1,lz1,lelt)

      complex*16 ci, z_d1,z_d2
      complex*16 z_tmpk1, z_tmpk2
      complex*16 z_tmp  , z_tmp2
      complex*16 z_tmp_kwave1
      complex*16 z_tmp_kwave2
      integer e

      if (nid.eq.0) open(unit=111,file='z_data.txt')
      if (nid.eq.0) write(6,*) 'reading data file z_flat_data.txt'

      if (nid.eq.0) then
           read(111,*) knn
           do k=1,knn
              read(111,*) kw3_r0(k),kw3_i0(k),kw4_r0(k),kw4_i0(k)
           enddo
      else
           knn = 0
           call rzero(kw3_r0,len)
           call rzero(kw3_i0,len)
           call rzero(kw4_r0,len)
           call rzero(kw4_i0,len)
      endif

      kn= iglsum(knn,1)
      call gop(kw3_r0,kw3_r,'+  ',kn)
      call gop(kw3_i0,kw3_i,'+  ',kn)
      call gop(kw4_r0,kw4_r,'+  ',kn)
      call gop(kw4_i0,kw4_i,'+  ',kn)

      ci  =(0.0,1.0)
  
      dx = 2.*pi ! domain dize in x-driection
      scale_k= 2.*pi/dx

      do k=30,34      

      z_kw(1)= 0   ! negative x-direction DTN  
      z_kw(2)= 0   ! positive x-direction DTN
      z_kw(5)= 0   ! negative z-direction DTN
      z_kw(6)= 0   ! positive z-direction DTN
      
      z_kw(3)=scale_k*(kw3_r(k)+kw3_i(k)*ci)
      z_kw(4)=scale_k*(kw4_r(k)+kw4_i(k)*ci)

      call rzero(flag,6)

      flag(3)= 0 ! not include the bottom part
      flag(4)= 1 !incident from top

c..   only for the energy test
      kw(3)= real(z_kw(3))
      kw(4)= real(z_kw(4))

c...  assign temporary values of wavenumber kw
      alp0=0.0 !0.1*scale_k
      z_tmpk1=cdsqrt(z_kw(3)**2-alp0**2)
      z_tmpk2=cdsqrt(z_kw(4)**2-alp0**2)

C...  define parameters for two medium layers   
      amid=0.0
      z_d1=2.0*z_tmpk2/(z_tmpk1+z_tmpk2)*exp(-ci*(z_tmpk2-z_tmpk1)*amid)
      z_d2=(z_tmpk2-z_tmpk1)/(z_tmpk1+z_tmpk2)*exp(-ci*2.0*z_tmpk2*amid)

C...  define parameters for multilayer    
      do e=1,nelt
         if     (if_in_region(e).eq.1) then  ! multilayer 
               z_alpha0(e)= alp0
               z_beta0 (e)= z_tmpk1
         elseif (if_in_region(e).eq.2) then  ! multilayer
               z_alpha0(e)= alp0
               z_beta0 (e)= z_tmpk2
         endif
      enddo
      
C...  box mesh with periodic boundary
      n = npts
      n2= npts*2

      do e= 1,nelt
          if    (if_in_region(e).eq.1) then !bottom layer
             z_tmp_kwave1 = z_kw(3)
             z_tmp_kwave2 = z_beta0(e)**2
             do i= 1,nxyz 
                j= i+(e-1)*nxyz
                xx= xm1(j,1,1,1)
                yy= ym1(j,1,1,1)
                zz= zm1(j,1,1,1)
                z_kwave1 (  j) = z_tmp_kwave1
                z_kwave2 (  j) = z_tmp_kwave2
                z_rhs_inc(  j) = 0.0 ! real: incident wave
                z_spotent(  j) = z_d1*exp(ci
     $                          *(z_alpha0(e)*xx-z_beta0(e)*yy))
             enddo
         elseif (if_in_region(e).eq.2) then ! top layer
             z_tmp_kwave1 = z_kw(4)
             z_tmp_kwave2 = z_beta0(e)**2
             do i= 1,nxyz 
                j= i+(e-1)*nxyz
                xx= xm1(j,1,1,1)
                yy= ym1(j,1,1,1)
                zz= zm1(j,1,1,1)
                z_kwave1 (  j) = z_tmp_kwave1
                z_kwave2 (  j) = z_tmp_kwave2
                z_rhs_inc(  j) = exp(ci*(z_alpha0(e)*xx-z_beta0(e)*yy)) ! real: incident wave
                z_spotent(  j) = z_rhs_inc(j)
     $                  + z_d2*exp(ci*(z_alpha0(e)*xx+z_beta0(e)*yy))
             enddo
         endif
      enddo
 10   format(i5,4f13.5)

      call z2r_copy(rhs_inc(1),rhs_inc(n+1),z_rhs_inc,n)
      call cem_dtn_quasi_sol(rhs_inc(1),alp0,2)
      call r2z_copy(z_rhs_inc,rhs_inc(1),rhs_inc(n+1),n)
      call maxwell_grad(dxinc(  1),dyinc(  1),dzinc(  1),rhs_inc(  1))
      call maxwell_grad(dxinc(n+1),dyinc(n+1),dzinc(n+1),rhs_inc(n+1))
      call copy (rhs_nmn,dyinc,n2) ! assing neumman part boundary condition
      call r2z_copy(z_rhs_nmn,rhs_nmn(1),rhs_nmn(n+1),n)

      call z_hmhDtN  ! return potent --> total field         

      call cem_dtn_quasi_sol(potent(1),alp0,1)
      call cem_dtn_quasi_sol(rhs_inc(1),alp0,1)
  
      call r2z_copy(z_potent,potent(1),potent(n+1),n)

      call sub3(scaten(1,2),potent(  1),rhs_inc(  1),n) ! scattered field
      call sub3(scathn(1,2),potent(n+1),rhs_inc(n+1),n)

      call cem_acoustic_test2(energy_err,flag,real(z_beta0(nelt)),dx)
      
      call copy(en(1,1),potent (  1),n)   ! numeric total field real
      call copy(hn(1,1),potent (n+1),n)   ! numeric total field imag
      call copy(en(1,2),scaten (1,2),n)   ! numeric scattered real
      call copy(hn(1,2),scathn (1,2),n)   ! numeric scattered real
      
      call z2r_copy(spotent(1),spotent(n+1),z_spotent,n)
      
      call copy(en(1,3),spotent(  1),n)   ! exact total field real
      call copy(hn(1,3),spotent(n+1),n)   ! exact total field imag
      call sub3(epotent(  1),potent(  1),spotent(  1),n)
      call sub3(epotent(n+1),potent(n+1),spotent(n+1),n)

      call copy(sen(1,3),rhs_inc (  1),n)   ! numeric total field real
      call copy(shn(1,3),rhs_inc (n+1),n)   ! numeric total field imag
      call cem_out 

      smax1  = glmax (scaten (1,2),n)
      smax2  = glmax (scathn (1,2),n)
      smin1  = glmin (scaten (1,2),n)
      smin2  = glmin (scathn (1,2),n)

      pmax1  = glmax (potent (  1),n)
      pmax2  = glmax (potent (n+1),n)
      pmin1  = glmin (potent (  1),n)
      pmin2  = glmin (potent (n+1),n)

      errmax1= glamax(epotent(  1),n)
      errmax2= glamax(epotent(n+1),n)

      if (nid.eq.0) write(6,20)  smax1  ,smin1
      if (nid.eq.0) write(6,30)  smax2  ,smin2
      if (nid.eq.0) write(6,40)  pmax1  ,pmin1
      if (nid.eq.0) write(6,50)  pmax2  ,pmin2
      if (nid.eq.0) write(6,60)  errmax1,errmax2,nx1-1,nelt,nelgt,np

 20   format(' val_sct    :: real max/min=',2e25.15)
 30   format(' val_sct    :: imag max/min=',2e25.15)
 40   format(' val_tot    :: real max/min=',2e25.15)
 50   format(' val_tot    :: imag max/min=',2e25.15)
 60   format(' val_err_tot::    real/imag:',2e25.15,4i8)

      enddo
      return
      end
c-----------------------------------------------------------------------
      subroutine usersol(tt, myshx, myshy, myshz, mysex, mysey, mysez)
c-----------------------------------------------------------------------
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      real tt
      real myshx(lx1,ly1,lz1,lelt)
      real myshy(lx1,ly1,lz1,lelt)
      real myshz(lx1,ly1,lz1,lelt)
      real mysex(lx1,ly1,lz1,lelt)
      real mysey(lx1,ly1,lz1,lelt)
      real mysez(lx1,ly1,lz1,lelt)

c     npts=nx1*ny1*nz1*nelt

      do i = 1,npts
         xx= xm1(i,1,1,1)
         yy= ym1(i,1,1,1)
         zz= zm1(i,1,1,1)
         myshx(i,1,1,1)  =-pi*sin(pi*xx)*cos(pi*yy)
         myshy(i,1,1,1)  =-pi*cos(pi*xx)*sin(pi*yy)
         myshz(i,1,1,1)  = 0
         mysex(i,1,1,1)  =-pi*sin(pi*xx)*cos(pi*yy)
         mysey(i,1,1,1)  =-pi*cos(pi*xx)*sin(pi*yy)
         mysez(i,1,1,1)  = 0
      enddo


      return
      end
c-----------------------------------------------------------------------
      subroutine usersrc(baseidx,srchx,srchy,srchz,srcex,srcey,srcez)

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'
      include 'PML'


      return
      end
c-----------------------------------------------------------------------
      subroutine uservp (ix,iy,iz,iel)
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      integer  n, ix, iy, iz, ieg
      real      one, xcc, ycc, zcc, x1, y1, z1
      real     lambda, fc, wc                     

      permea = permea_0             
      permit = permit_0                

      ! if_in_region(iel) define in usrdat2

      return
      end
c-----------------------------------------------------------------------
      subroutine userq  (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
C
      qvol   = 0.0
      source = 0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine useric (ix,iy,iz,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'
C

      return
      end
c-----------------------------------------------------------------------
      subroutine userbc (ix,iy,iz,iside,ieg)
      include 'SIZE'
      include 'TOTAL'
      include 'NEKUSE'

      ux=0.0
      uy=0.0
      uz=0.0
      temp=0.0

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat

      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'NEKUSE'

      return
      end
c-----------------------------------------------------------------------
      subroutine usrdat2
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'

      integer  e

      n    = nx1*ny1*nz1*nelv

      xmin = glmin(xm1,n)
      xmax = glmax(xm1,n)
      ymin = glmin(ym1,n)
      ymax = glmax(ym1,n)
      zmin = glmin(zm1,n)
      zmax = glmax(zm1,n)

      write(6,*) 'xmin/xmax',xmin,xmax
      write(6,*) 'ymin/ymax',ymin,ymax

c... initial rescaling

      target_width  = 200.*2*pi/200.0
      target_height = 285.*2*pi/200.0
      target_angle  = 55.*(pi/180.)

      y0     = 1.0
      x0     = 0.5

      scalex = target_width /(xmax-xmin)  ! 200
      scaley = target_height/(2*y0)       ! 285/2

      n = nx1*ny1*nz1*nelt

      call cmult(xm1,scalex,n)
      call cmult(ym1,scaley,n)

c.... element assignement

      xmin = glmin(xm1,n)
      xmax = glmax(xm1,n)
      ymin = glmin(ym1,n)
      ymax = glmax(ym1,n)
      zmin = glmin(zm1,n)
      zmax = glmax(zm1,n)

      target_x0= xmin
      target_x1= 0
      target_x2= xmax 
      target_height2 = target_height/2.0

      mx = nx1/2
      my = ny1/2
      mz = 1

      do e=1,nelt
         xxmid = xm1(mx,my,mz,e)
         yymid = ym1(mx,my,mz,e)

         if_in_region(e)=2

         if      (xxmid.lt.target_x1) then

             ! point1=(target_x0,0), point2=(target_x1,target_height2)

             slope= target_height2/(target_x1-target_x0)
             target_y= slope *(xxmid - target_x0)

             if (yymid.lt.target_y) then
                 if_in_region(e)=1
                 if (nid.eq.0) write(6,*) 'tungsten: x0<x<x1',e
             endif

         elseif ((xxmid.gt.target_x1).and.(xxmid.lt.target_x2)) then

             ! point1= (target_x1,-target_height2), point2=(target_x2,0)
             slope= target_height2/(target_x2-target_x1)
             target_y= slope *(xxmid - target_x1)-target_height2

             if (yymid.lt.target_y) then
                 if_in_region(e)=1
                 if (nid.eq.0) write(6,*) 'tungsten: x1<x<x2',e
             endif
         endif
      enddo

c... shear the domain   
      xs = scalex*x0 ! 100
      ys = scaley*y0 ! 285/2

      current_angle = atan2(ys,xs)
      ca = current_angle*180./pi
      if (nid.eq.0) write(6,*) ca,' current angle:'

      xcurrent = target_height/tan(current_angle)
      xtarget  = target_height/tan(target_angle)
      xtarget  = xtarget ! Use half, because we work from midpoing
      dtarget  = (xtarget-xcurrent)/2.

      do i=1,n          !    Apply Shear
         x=xm1(i,1,1,1)
         y=ym1(i,1,1,1)
         yscale = y/(0.5*target_height)
         dx = dtarget*yscale
         xm1(i,1,1,1) = xm1(i,1,1,1) + dx
      enddo

      xmin = glmin(xm1,n)
      xmax = glmax(xm1,n)
      ymin = glmin(ym1,n)
      ymax = glmax(ym1,n)
      zmin = glmin(zm1,n)
      zmax = glmax(zm1,n)

      write(6,*) 'final xmin/xmax',xmin,xmax
      write(6,*) 'final ymin/ymax',ymin,ymax

      return
      end
c-----------------------------------------------------------------------
      subroutine userft           
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'


      return
      end
c-----------------------------------------------------------------------
      subroutine userchk
      include 'SIZE'
      include 'TOTAL'
      include 'EMWAVE'
      include 'ACOUSTIC'


      common /ccpu/ cpu_t,cpu_dtime,cpu_chk

c ... compute errors


      if (istep.le.10.or.mod(istep,iocomm).eq.0) then

        ntott = nx1*ny1*nz1*nelt
        npts3 = nx1*ny1*nz1*nelt*3
        nsrf  = nx1*nz1*nelt*6

        if (ifsol) then
          call usersol(time,sHN(1,1),sHN(1,2),sHN(1,3),
     $                      sEN(1,1),sEN(1,2),sEN(1,3))
        else
          call rzero(sHN, npts3) 
          call rzero(sEN, npts3) 
        endif

        call sub3(ErrHN(1,1),SHN(1,1),HN(1,1),NTOTT)
        call sub3(ErrHN(1,2),SHN(1,2),HN(1,2),NTOTT)
        call sub3(ErrHN(1,3),SHN(1,3),HN(1,3),NTOTT)
        call sub3(ErrEN(1,1),SEN(1,1),EN(1,1),NTOTT)
        call sub3(ErrEN(1,2),SEN(1,2),EN(1,2),NTOTT)
        call sub3(ErrEN(1,3),SEN(1,3),EN(1,3),NTOTT)

        HXmr = glamax(ErrHN(1,1),NTOTT)
        HYmr = glamax(ErrHN(1,2),NTOTT)
        HZmr = glamax(ErrHN(1,3),NTOTT)
        EXmr = glamax(ErrEN(1,1),NTOTT)
        EYmr = glamax(ErrEN(1,2),NTOTT)
        EZmr = glamax(ErrEN(1,3),NTOTT)
 
        HXer = glsc3(ErrHN(1,1),bm1,ErrHN(1,1),NTOTT)/ volvm1
        HYer = glsc3(ErrHN(1,2),bm1,ErrHN(1,2),NTOTT)/ volvm1
        HZer = glsc3(ErrHN(1,3),bm1,ErrHN(1,3),NTOTT)/ volvm1
        EXer = glsc3(ErrEN(1,1),bm1,ErrEN(1,1),NTOTT)/ volvm1
        EYer = glsc3(ErrEN(1,2),bm1,ErrEN(1,2),NTOTT)/ volvm1
        EZer = glsc3(ErrEN(1,3),bm1,ErrEN(1,3),NTOTT)/ volvm1

        if (hxer.gt.0) hxer = sqrt(hxer)
        if (hyer.gt.0) hyer = sqrt(hyer)
        if (hzer.gt.0) hzer = sqrt(hzer)
        if (exer.gt.0) exer = sqrt(exer)
        if (eyer.gt.0) eyer = sqrt(eyer)
        if (ezer.gt.0) ezer = sqrt(ezer)

c ... print statement

        snel = nelt + .5
        snel = sqrt(snel)
        nels = snel
        nnn  = nx1-1
        npt1 = nnn*nels
        npts = nx1*ny1*nz1*nelt ! npts = npt1**ndim

        if (istep.eq.0)       cpu_p_t= 0
        if (istep.gt.0)       cpu_p_t= cpu_t/(npts*istep)
        if (istep.eq.nsteps)  cpu_p_t= glsum(cpu_p_t,1)/np

        if (nid.eq.0) then

         if (istep.eq.1) write(6,90)
         write(6,91) ISTEP,nelt,nels,nnn,npt1,npts
     $         ,time,dt,HXer,HYer,HZer,EXer,EYer,EZer,cpu_t,cpu_p_t
         write(6,95) ISTEP,nelt,nels,nnn,npt1,npts
     $         ,time,dt,HXmr,HYmr,HZmr,EXmr,EYmr,EZmr,cpu_t,cpu_p_t


 90      format(/,'    istep   nelt  nels  N  npt1    npts   time
     $  dt     HXerr     HYerr     HZerr     EXerr     EYerr     EZerr
     $  cpu_t   cpu_t_pts')
 91      format(/,i10,3i5,i5,i9,1p9e10.3,e9.2,' CPU: L2  '  )
 95      format(  i10,3i5,i5,i9,1p9e10.3,e9.2,' CPU: Linf'  )


        endif ! nid=0

      endif

      return
      end
c-----------------------------------------------------------------------
